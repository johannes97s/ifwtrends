n_windows = 10, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2],
stepsize = "1 day", windowsize = "3 months",
n_windows = 10, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
d10 <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
d <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 20, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2],
stepsize = "1 day", windowsize = "3 months",
n_windows = 20, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
d20 <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
d <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 200, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2],
stepsize = "1 day", windowsize = "3 months",
n_windows = 200, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2],
stepsize = "1 day", windowsize = "3 months",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
d200 <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
d10
d20
d200
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2],
stepsize = "1 day", windowsize = "3 months",
n_windows = 120, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2],
stepsize = "1 day", windowsize = "3 months",
n_windows = 91, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
dat <- pca(keywords = c("ikea", "saturn", "amazon", "ebay"),
categories = 0,
geo = "DE",
start = "2006-01-01",
end = Sys.Date(),
components = max(length(keywords), length(categories)))
series <- dat %>% select(date, 6:9)
factors <- dat %>% select(date, 2:5)
factorR2(series, factors)
dat <- pca(keywords = c("ikea", "saturn", "amazon", "ebay"),
categories = 0,
geo = "DE",
start = "2006-01-01",
end = Sys.Date(),
components = max(length(keywords), length(categories)))
series <- dat %>% select(date, 6:9)
factors <- dat %>% select(date, 2:5)
factorR2(series, factors, plot = T)
roll(keywords = "ikea",
geo = "DE",
start_series = "2006-01-01",
start_period = "2006-05-01",
end = "2006-12-01")
dat <- pca(keywords = c("ikea", "saturn", "amazon", "ebay"),
categories = 0,
geo = "DE",
start = "2006-01-01",
end = Sys.Date(),
components = max(length(keywords), length(categories)))
series <- dat %>% select(date, 6:9)
factors <- dat %>% select(date, 2:5)
factorR2(series, factors, plot = T)
install("~/Documents/ifwtrends")
dat <- pca(keywords = c("ikea", "saturn", "amazon", "ebay"),
categories = 0,
geo = "DE",
start = "2006-01-01",
end = Sys.Date(),
components = max(length(keywords), length(categories)))
series <- dat %>% select(date, 6:9)
factors <- dat %>% select(date, 2:5)
factorR2(series, factors, plot = T)
factorR2(series, factors, plot = T)
#'@param factors tibble mit den Faktoren als Spalten.
#'@param plot plot=TRUE gibt zusätzlich einen Barplot der R2 aus.
#'
#'@return Tabelle der R^2 jeder Zeitreihe auf jeden Faktor. Wenn plot=T zusätzlich Plot.
#'@examples
#'2+2
#'@import tidyverse
#'@export
#'
#'
factorR2 <- function(series, factors, plot = F){
stopifnot("series muss führende Zeitspalte enthalten" = class(series[[1]]) == "Date")
stopifnot("factors muss führende Zeitspalte enthalten" = class(factors[[1]]) == "Date")
R2 <- tibble()
for (i in seq_along(factors[-1])){
f <- function(serie) {
s <- summary(lm(factors[-1][[i]] ~ serie))
s$r.squared
}
R2 <- bind_rows(R2, apply(series[-1], 2, f))
}
res <- bind_cols(tibble(factors = str_c("PC",1:length(factors[-1]))), R2)
if (!plot) return(res)
if (plot){
pivot_longer(factors, -date, names_to = "series", values_to = "value") -> pcomp
pivot_longer(series, -date, names_to = "series", values_to = "value") -> series
pivot_longer(res, -factors, names_to = "series", values_to = "R2")-> r2
r2 %>%
#filter(factors == "PC1") %>%
ggplot(aes(x = series, y = R2))+
geom_bar(stat = "identity")+
facet_wrap(~factors, ncol = 1)+
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 1, hjust=1))+
labs(title = "Bestimmtheitsmaß der Regression auf verschiedene Hauptkomponenten")+
scale_y_continuous(breaks=c(0, 0.5, 1))
}
}
factorR2(series, factors, plot = T)
plot(1)
#'@param factors tibble mit den Faktoren als Spalten.
#'@param plot plot=TRUE gibt zusätzlich einen Barplot der R2 aus.
#'
#'@return Tabelle der R^2 jeder Zeitreihe auf jeden Faktor. Wenn plot=T zusätzlich Plot.
#'@examples
#'2+2
#'@import tidyverse
#'@export
#'
#'
factorR2 <- function(series, factors, plot = F){
stopifnot("series muss führende Zeitspalte enthalten" = class(series[[1]]) == "Date")
stopifnot("factors muss führende Zeitspalte enthalten" = class(factors[[1]]) == "Date")
R2 <- tibble()
for (i in seq_along(factors[-1])){
f <- function(serie) {
s <- summary(lm(factors[-1][[i]] ~ serie))
s$r.squared
}
R2 <- bind_rows(R2, apply(series[-1], 2, f))
}
res <- bind_cols(tibble(factors = str_c("PC",1:length(factors[-1]))), R2)
if (!plot) return(res)
if (plot){
pivot_longer(factors, -date, names_to = "series", values_to = "value") -> pcomp
pivot_longer(series, -date, names_to = "series", values_to = "value") -> series
pivot_longer(res, -factors, names_to = "series", values_to = "R2")-> r2
r2 %>%
#filter(factors == "PC1") %>%
ggplot(aes(x = series, y = R2))+
geom_bar(stat = "identity")+
facet_wrap(~factors, ncol = 1)+
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 1, hjust=1))+
labs(title = "Bestimmtheitsmaß der Regression auf verschiedene Hauptkomponenten")+
scale_y_continuous(breaks=c(0, 0.5, 1))
return(res)
}
}
factorR2(series, factors, plot = T)
#'@param factors tibble mit den Faktoren als Spalten.
#'@param plot plot=TRUE gibt zusätzlich einen Barplot der R2 aus.
#'
#'@return Tabelle der R^2 jeder Zeitreihe auf jeden Faktor. Wenn plot=T zusätzlich Plot.
#'@examples
#'2+2
#'@import tidyverse
#'@export
#'
#'
factorR2 <- function(series, factors, plot = F){
stopifnot("series muss führende Zeitspalte enthalten" = class(series[[1]]) == "Date")
stopifnot("factors muss führende Zeitspalte enthalten" = class(factors[[1]]) == "Date")
R2 <- tibble()
for (i in seq_along(factors[-1])){
f <- function(serie) {
s <- summary(lm(factors[-1][[i]] ~ serie))
s$r.squared
}
R2 <- bind_rows(R2, apply(series[-1], 2, f))
}
res <- bind_cols(tibble(factors = str_c("PC",1:length(factors[-1]))), R2)
if (!plot) return(res)
if (plot){
pivot_longer(factors, -date, names_to = "series", values_to = "value") -> pcomp
pivot_longer(series, -date, names_to = "series", values_to = "value") -> series
pivot_longer(res, -factors, names_to = "series", values_to = "R2")-> r2
plt <- r2 %>%
#filter(factors == "PC1") %>%
ggplot(aes(x = series, y = R2))+
geom_bar(stat = "identity")+
facet_wrap(~factors, ncol = 1)+
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 1, hjust=1))+
labs(title = "Bestimmtheitsmaß der Regression auf verschiedene Hauptkomponenten")+
scale_y_continuous(breaks=c(0, 0.5, 1))
return(list(res, plt))
}
}
factorR2(series, factors, plot = T)
install("~/Documents/ifwtrends")
knitr::opts_chunk$set(collapse = TRUE,
comment = "#>")
library(ifwtrends)
dat <- pca(keywords = c("ikea", "saturn", "amazon", "ebay"),
categories = 0,
geo = "DE",
start = "2006-01-01",
end = Sys.Date(),
components = max(length(keywords), length(categories)))
series <- dat %>% select(date, 6:9)
factors <- dat %>% select(date, 2:5)
factorR2(series, factors, plot = T)
dat <- pca(keywords = c("ikea", "saturn", "amazon", "ebay"),
categories = 0,
geo = "DE",
start = "2006-01-01",
end = Sys.Date(),
components = max(length(keywords), length(categories)))
series <- dat %>% select(date, 6:9)
factors <- dat %>% select(date, 2:5)
factorR2(series, factors, plot = T)
dat <- pca(keywords = c("ikea", "saturn", "amazon", "ebay"),
categories = 0,
geo = "DE",
start = "2006-01-01",
end = Sys.Date(),
components = max(length(keywords), length(categories)))
series <- dat %>% select(date, 6:9)
factors <- dat %>% select(date, 2:5)
factorR2(series, factors, plot = T)
348+12+68+12+24
gstrends()
?gtrends
time = stc("2020-01-01 ", as.character(Sys.Date()))
time = str_c("2020-01-01 ", as.character(Sys.Date()))
time
keyword = c("arbeitslos")
geo = "DE"
from = "2006-01-01"
d <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 10, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2],
stepsize = "1 day", windowsize = "3 months",
n_windows = 10, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
d10 <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
d10
d10$time
348/2
/12
174/12
d10
print(d10, n = 100)
print(d, n = 100)
print(d, n = 200)
print(d, n = 300)
seq(Sys.Date(), length.out = 2, by = "-90 days")[2]
time = stc("2020-01-01 ", as.character(Sys.Date()))
orig <- gtrends(keyword = "arbeitslos",
geo = "DE"
time = time)
time = str_c("2020-01-01 ", as.character(Sys.Date()))
orig <- gtrends(keyword = "arbeitslos",
geo = "DE"
time = time)
time = str_c("2020-01-01 ", as.character(Sys.Date()))
orig <- gtrends(keyword = "arbeitslos",
geo = "DE",
time = time)
orig
time = str_c("2020-01-01 ", as.character(Sys.Date()))
orig <- select(gtrends(keyword = "arbeitslos",
geo = "DE",
time = time)$, date, value = hits)
time = str_c("2020-01-01 ", as.character(Sys.Date()))
orig <- select(gtrends(keyword = "arbeitslos",
geo = "DE",
time = time)$interest_over_time, date, value = hits)
orig
series <- daily_series(keyword = c("arbeitslos"),
geo = "DE",
from = "2021-01-01")
daily_series <- function(keyword = c("arbeitslos"),
geo = "DE",
from = "2006-01-01"){
d <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 40, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2],
stepsize = "1 day", windowsize = "3 months",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
dd <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
# download weekly series
w <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "11 weeks", windowsize = "5 years",
n_windows = 68, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
w2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-1 year")[2],
stepsize = "1 week", windowsize = "1 year",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
ww <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(w), trendecon:::aggregate_windows(w2))
# download monthly series
m <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "15 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "20 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(m), trendecon:::aggregate_windows(m2))
dd <- select(dd, -n)
ww <- select(ww, -n)
mm <- select(mm, -n)
# ww %>%
#   mutate(week = week(time), year = year(time)) %>%
#   filter(week <= 52) %>%
#   select(time, value) -> ww
#
#   dd <- ts_regular(ts_dts(dd))
#   dd$value <- 0.5*(na.locf(dd$value,fromLast =TRUE) + na.locf(dd$value))
#
#
#   ww <-  ts_regular(ts_dts(ww))
#   ww$value <- 0.5*(na.locf(ww$value,fromLast =TRUE) + na.locf(ww$value))
#
#   mm <-  ts_regular(ts_dts(mm))
#   mm$value <- 0.5*(na.locf(mm$value,fromLast =TRUE) + na.locf(mm$value))
# mm %>%
#   mutate(week = week(time), year = year(time)) %>%
#   group_by(week, year) %>%
#   mutate(value = mean(value)) %>%
#   ungroup() %>%
#   select( - time) %>%
#   filter(week <= 52) %>%
#   unique() %>%
#   bind_cols(time = ww$time) %>%
#   select(time, value)-> mm
wd <- tempdisagg::td(ww ~ dd, method = "fast", conversion = "mean")
wd <- predict(wd)
mwd <- tempdisagg::td(mm ~ wd, method = "fast", conversion = "mean")
mwd <- predict(mwd)
as_tibble(mwd)
}
series <- daily_series(keyword = c("arbeitslos"),
geo = "DE",
from = "2021-01-01")
daily_series <- function(keyword = c("arbeitslos"),
geo = "DE",
from = "2006-01-01"){
d <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 350, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2],
stepsize = "1 day", windowsize = "3 months",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
dd <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
# download weekly series
w <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "11 weeks", windowsize = "5 years",
n_windows = 68, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
w2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-1 year")[2],
stepsize = "1 week", windowsize = "1 year",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
ww <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(w), trendecon:::aggregate_windows(w2))
# download monthly series
m <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "15 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "20 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(m), trendecon:::aggregate_windows(m2))
dd <- select(dd, -n)
ww <- select(ww, -n)
mm <- select(mm, -n)
# ww %>%
#   mutate(week = week(time), year = year(time)) %>%
#   filter(week <= 52) %>%
#   select(time, value) -> ww
#
#   dd <- ts_regular(ts_dts(dd))
#   dd$value <- 0.5*(na.locf(dd$value,fromLast =TRUE) + na.locf(dd$value))
#
#
#   ww <-  ts_regular(ts_dts(ww))
#   ww$value <- 0.5*(na.locf(ww$value,fromLast =TRUE) + na.locf(ww$value))
#
#   mm <-  ts_regular(ts_dts(mm))
#   mm$value <- 0.5*(na.locf(mm$value,fromLast =TRUE) + na.locf(mm$value))
# mm %>%
#   mutate(week = week(time), year = year(time)) %>%
#   group_by(week, year) %>%
#   mutate(value = mean(value)) %>%
#   ungroup() %>%
#   select( - time) %>%
#   filter(week <= 52) %>%
#   unique() %>%
#   bind_cols(time = ww$time) %>%
#   select(time, value)-> mm
wd <- tempdisagg::td(ww ~ dd, method = "fast", conversion = "mean")
wd <- predict(wd)
mwd <- tempdisagg::td(mm ~ wd, method = "fast", conversion = "mean")
mwd <- predict(mwd)
as_tibble(mwd)
}
install("~/Documents/ifwtrends")
2389-612
