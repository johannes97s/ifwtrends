factors <- dat[2:6]
series <- dat[7:length(dat)]
factorR2(series, factors)
factorR2(series, factors)
dates <- seq.Date(from = as.Date( "2004-01-01"), to = as.Date("2021-08-01"), by = "month")
####################Tibble mit Kategorien aus dem Paper erstellen
cat_paper <- as_tibble(read.csv("Kategorien_Woloszko.csv", head = F))
names(cat_paper) = "name"
cat<- as_tibble(categories)
cat_paper %>%
left_join(cat, by = "name") %>%
unique() -> cat_paper
##################Tibble mit Zeitreihen erstellen
series <- tibble(date = dates)
gtrends(geo = "DE", time = "all", category = "651")
gtrends(geo = "DE", time = "all", category = "651")$related_topics
nrows(gtrends(geo = "DE", time = "all", category = "651")$related_topics)
nrow(gtrends(geo = "DE", time = "all", category = "651")$related_topics)
write.xlsx(factorR2(series, factors), "Faktoren_R2.xlsx")
dat <- as_tibble(read.xlsx("~/ifwtrends/Kategorien_und_PC.xlsx", detectDates = T))
factors <- dat[2:6]
series <- dat[7:length(dat)]
write.xlsx(factorR2(series, factors), "Faktoren_R2.xlsx")
write.xlsx(factorR2(series, factors), "Faktoren_R2.xlsx")
usethis::use_r("disaggregation.R")
daily <- read.csv("raw/de/arbeitslos_d.csv")
daily
dat_d <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_m <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_d
dat_aggr_m <- daily %>%
mutate(time = floor_date(time), "month") %>%
group_by(time) %>%
mutate(mean = mean(time))
library(lubridate)
dat_aggr_m <- daily %>%
mutate(time = floor_date(time), "month") %>%
group_by(time) %>%
mutate(mean = mean(time))
dat_aggr_m <- daily %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(mean = mean(time))
daily %>%
mutate(time = floor_date(time, "month"))
daily
dat_aggr_m <- dat_d %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(mean = mean(time))
dat_aggr_m
plot(dat_m$value, type ="l")
dat_d <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_m <- as_tibble(read.csv("raw/de/arbeitslos_m.csv")) %>%
mutate(time = as.Date(time))
dat_aggr_m <- dat_d %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(mean = mean(time))
plot(dat_m$value, type ="l")
lines(dat_aggr_m$value, col = "red")
plot(dat_aggr_m$value, type ="l")
dat_d <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_m <- as_tibble(read.csv("raw/de/arbeitslos_m.csv")) %>%
mutate(time = as.Date(time))
dat_aggr_m <- dat_d %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(mean = mean(time))
plot(dat_aggr_m$value, type ="l")
dat_d <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_m <- as_tibble(read.csv("raw/de/arbeitslos_m.csv")) %>%
mutate(time = as.Date(time))
dat_aggr_m <- dat_d %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(value = mean(time))
dat_d <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_m <- as_tibble(read.csv("raw/de/arbeitslos_m.csv")) %>%
mutate(time = as.Date(time))
dat_aggr_m <- dat_d %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(value = mean(time))
plot(dat_aggr_m$value, type ="l")
dat_d <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_m <- as_tibble(read.csv("raw/de/arbeitslos_m.csv")) %>%
mutate(time = as.Date(time))
dat_aggr_m <- dat_d %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(value = mean(value))
plot(dat_aggr_m$value, type ="l")
lines(dat_m$value, col = "red")
dat_aggr_m
dat_d <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_m <- as_tibble(read.csv("raw/de/arbeitslos_m.csv")) %>%
mutate(time = as.Date(time))
dat_aggr_m <- dat_d %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(value = mean(value)) %>%
unique()
plot(dat_aggr_m$value, type ="l")
lines(dat_m$value, col = "red")
dat_m
dat_aggr_m
dat_aggr_m <- dat_d %>%
select(time, value) %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(value = mean(value)) %>%
unique()
plot(dat_aggr_m$value, type ="l")
lines(dat_m$value, col = "red")
dat_aggr_m$value
dat_m
dat_aggr_m
dat_aggr_m$time
dat_d <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_m <- as_tibble(read.csv("raw/de/arbeitslos_m.csv")) %>%
mutate(time = as.Date(time)) %>%
filter(time <= as.Date("2020-10-01"))
dat_aggr_m <- dat_d %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(aggr_value = mean(value)) %>%
select(time, aggr_value) %>%
unique()
dat_m
dat_aggr_m
left_join(dat_m, dat_aggr_m)
dat_d <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_m <- as_tibble(read.csv("raw/de/arbeitslos_m.csv")) %>%
mutate(value_m = value, time = as.Date(time)) %>%
select(time, value_m)
filter(time <= as.Date("2020-10-01"))
dat_d <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_m <- as_tibble(read.csv("raw/de/arbeitslos_m.csv")) %>%
mutate(value_m = value, time = as.Date(time)) %>%
select(time, value_m)
dat_d <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_m <- as_tibble(read.csv("raw/de/arbeitslos_m.csv")) %>%
mutate(value_m = value, time = as.Date(time)) %>%
select(time, value_m) %>%
filter(time <= as.Date("2020-10-01"))
dat_aggr_m <- dat_d %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(aggr_value = mean(value)) %>%
select(time, aggr_value) %>%
unique()
left_join(dat_m, dat_aggr_m)
pivot_longer(left_join(dat_m, dat_aggr_m), cols = value_m:aggr_value, names_to = type, values_to = value) %>%
ggplot(aes(x = time, y = value, col = type))
pivot_longer(left_join(dat_m, dat_aggr_m), cols = value_m:aggr_value, names_to = 'type', values_to = "value") %>%
ggplot(aes(x = time, y = value, col = type))
pivot_longer(left_join(dat_m, dat_aggr_m), cols = value_m:aggr_value, names_to = 'type', values_to = "value") %>%
ggplot(aes(x = time, y = value, col = type)) +
geom_line()
library(tidyverse)
library(gtrendsR)
library(trendecon)
library(tsbox)
library(openxlsx)
dates <- seq.Date(from = as.Date( "2004-01-01"), to = as.Date("2021-08-01"), by = "month")
####################Tibble mit Kategorien aus dem Paper erstellen
cat_paper <- as_tibble(read.csv("Kategorien_Woloszko.csv", head = F))
names(cat_paper) = "name"
cat<- as_tibble(categories)
cat_paper %>%
left_join(cat, by = "name") %>%
unique() -> cat_paper
##################Tibble mit Zeitreihen erstellen
series <- tibble(date = dates)
missing = NULL
for (i in cat_paper$id){
g <- gtrends(geo = "DE", time = "all", category = i)$interest_over_time
if (is.null(g)) missing <- c(missing, cat_paper$name[cat_paper$id == i])
else series <- bind_cols(series, i = g$hits)
}
names(series) <- c("date", setdiff(cat_paper$name, missing))
series %>%
pivot_longer(cols = -date, names_to = "id", values_to = "hits") -> series2
##################Tibble mit Zeitreihen erstellen
series <- tibble(date = dates)
missing = NULL
for (i in cat_paper$id[1:20]){
g <- gtrends(geo = "DE", time = "all", category = i)$interest_over_time
if (is.null(g)) missing <- c(missing, cat_paper$name[1:20][cat_paper$id[1:20] == i])
else series <- bind_cols(series, i = g$hits)
}
names(series) <- c("date", setdiff(cat_paper$name, missing))
names(series) <- c("date", setdiff(cat_paper$name[1:20], missing))
series %>%
pivot_longer(cols = -date, names_to = "id", values_to = "hits") -> series2
##########################################
########plots
ggplot(series2, aes(x = date, y = hits, color = id)) +
geom_line() +
theme(legend.position = "none")
##########################################
########plots
ggplot(series2, aes(x = date, y = hits, color = id)) +
geom_line()
cat_paper
##################Tibble mit Zeitreihen erstellen
series <- tibble(date = dates)
missing = NULL
for (i in cat_paper$id[21:50]){
g <- gtrends(geo = "DE", time = "all", category = i)$interest_over_time
if (is.null(g)) missing <- c(missing, cat_paper$name[21:50][cat_paper$id[21:50] == i])
else series <- bind_cols(series, i = g$hits)
}
names(series) <- c("date", setdiff(cat_paper$name[21:50], missing))
series %>%
pivot_longer(cols = -date, names_to = "id", values_to = "hits") -> series2
##########################################
########plots
ggplot(series2, aes(x = date, y = hits, color = id)) +
geom_line()
library(tidyverse)
library(gtrendsR)
library(trendecon)
library(tsbox)
library(openxlsx)
dat_d <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_m <- as_tibble(read.csv("raw/de/arbeitslos_m.csv")) %>%
mutate(value_m = value, time = as.Date(time)) %>%
select(time, value_m) %>%
filter(time <= as.Date("2020-10-01"))
dat_aggr_m <- dat_d %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(aggr_value = mean(value)) %>%
select(time, aggr_value) %>%
unique()
library(lubridate)
dat_d <- as_tibble(read.csv("raw/de/arbeitslos_d.csv")) %>%
mutate(time = as.Date(time))
dat_m <- as_tibble(read.csv("raw/de/arbeitslos_m.csv")) %>%
mutate(value_m = value, time = as.Date(time)) %>%
select(time, value_m) %>%
filter(time <= as.Date("2020-10-01"))
dat_aggr_m <- dat_d %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(aggr_value = mean(value)) %>%
select(time, aggr_value) %>%
unique()
pivot_longer(left_join(dat_m, dat_aggr_m), cols = value_m:aggr_value, names_to = 'type', values_to = "value") %>%
ggplot(aes(x = time, y = value, col = type)) +
geom_line()
plot(dat_m$time, dat_m$value_m, type = "l")
pivot_longer(left_join(dat_m, dat_aggr_m), cols = value_m:aggr_value, names_to = 'type', values_to = "value") %>%
ggplot(aes(x = time, y = value, col = type)) +
geom_line()
plot(dat_m$time, dat_m$value_m, type = "l")
max(dat_m$time)
library(lubridate)
write_keyword("arbeitslos", "DE")
dat_m
pivot_longer(left_join(dat_m, dat_aggr_m), cols = value_m:aggr_value, names_to = 'type', values_to = "value") %>%
ggplot(aes(x = time, y = value, col = type)) +
geom_line()
dat_m_orig <- gtrends("arbeitslos", geo = "DE", time = "2006-01-01 2020-10-01")
dat_m_orig
dat_m_orig <- ts_gtrends("arbeitslos", geo = "DE", time = "2006-01-01 2020-10-01")
dat_m_orig
dat_m_orig <- seelect(ts_gtrends("arbeitslos", geo = "DE", time = "2006-01-01 2020-10-01"), orig = value)
dat_m_orig <- select(ts_gtrends("arbeitslos", geo = "DE", time = "2006-01-01 2020-10-01"), orig = value)
dat_m_orig
pivot_longer(left_join(dat_m, dat_aggr_m, dat_m_orig), cols = value_m:aggr_value, names_to = 'type', values_to = "value") %>%
ggplot(aes(x = time, y = value, col = type)) +
geom_line()
pivot_longer(left_join(dat_m, dat_aggr_m, dat_m_orig), cols = value_m:orig, names_to = 'type', values_to = "value") %>%
ggplot(aes(x = time, y = value, col = type)) +
geom_line()
left_join(dat_m, dat_aggr_m, dat_m_orig)
dat_m_orig <- select(ts_gtrends("arbeitslos", geo = "DE", time = "2006-01-01 2020-10-01"), time, orig = value)
dat_aggr_m <- dat_d %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(aggr_value = mean(value)) %>%
select(time, aggr_value) %>%
unique()
pivot_longer(left_join(dat_m, dat_aggr_m, dat_m_orig), cols = value_m:orig, names_to = 'type', values_to = "value") %>%
ggplot(aes(x = time, y = value, col = type)) +
geom_line()
left_join(dat_m, dat_aggr_m, dat_m_orig)
ts_gtrends("arbeitslos", geo = "DE", time = "2006-01-01 2020-10-01")
dat_m_orig
left_join(dat_m, dat_aggr_m, dat_m_orig, by = "time")
dat_m
left_join(left_join(dat_m, dat_aggr_m), dat_m_orig)
pivot_longer(left_join(left_join(dat_m, dat_aggr_m), dat_m_orig), cols = value_m:orig, names_to = 'type', values_to = "value") %>%
ggplot(aes(x = time, y = value, col = type)) +
geom_line()
?ts_gtrends_mwd
ts_gtrends_mwd
from <- "2006-01-01"
d <- ts_gtrends_windows(keyword = keyword, geo = geo, from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 348, wait = 20, retry = 10, prevent_window_shrinkage = TRUE)
library(trendecon)
from <- "2006-01-01"
d <- ts_gtrends_windows(keyword = keyword, geo = geo, from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 348, wait = 20, retry = 10, prevent_window_shrinkage = TRUE)
d <- trendecon::ts_gtrends_windows(keyword = keyword, geo = geo, from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 348, wait = 20, retry = 10, prevent_window_shrinkage = TRUE)
d <- trendecon:::ts_gtrends_windows(keyword = keyword, geo = geo, from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 348, wait = 20, retry = 10, prevent_window_shrinkage = TRUE)
keyword = "arbeitslos"
from <- "2006-01-01"
d <- trendecon:::ts_gtrends_windows(keyword = keyword, geo = geo, from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 348, wait = 20, retry = 10, prevent_window_shrinkage = TRUE)
keyword = "arbeitslos"
geo = "DE"
from <- "2006-01-01"
d <- trendecon:::ts_gtrends_windows(keyword = keyword, geo = geo, from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 348, wait = 20, retry = 10, prevent_window_shrinkage = TRUE)
from <- "2020-01-01"
d <- trendecon:::ts_gtrends_windows(keyword = keyword, geo = geo, from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 348, wait = 20, retry = 10, prevent_window_shrinkage = TRUE)
d2 <- trendecon:::ts_gtrends_windows(keyword = keyword, geo = geo, from = seq(Sys.Date(),
length.out = 2, by = "-90 days")[2], stepsize = "1 day",
windowsize = "3 months", n_windows = 12, wait = 20,
retry = 10, prevent_window_shrinkage = FALSE)
dd <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
from <- "2020-01-01"
d <- trendecon:::ts_gtrends_windows(keyword = keyword, geo = geo, from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 348, wait = 20, retry = 10, prevent_window_shrinkage = TRUE)
d2 <- trendecon:::ts_gtrends_windows(keyword = keyword, geo = geo, from = seq(Sys.Date(),
length.out = 2, by = "-90 days")[2], stepsize = "1 day",
windowsize = "3 months", n_windows = 12, wait = 20,
retry = 10, prevent_window_shrinkage = FALSE)
dd <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
w <- trendecon:::ts_gtrends_windows(keyword = keyword, geo = geo, from = from,
stepsize = "11 weeks", windowsize = "5 years",
n_windows = 68, wait = 20, retry = 10, prevent_window_shrinkage = TRUE)
w2 <- trendecon:::ts_gtrends_windows(keyword = keyword, geo = geo, from = seq(Sys.Date(),
length.out = 2, by = "-1 year")[2], stepsize = "1 week",
windowsize = "1 year", n_windows = 12, wait = 20,
retry = 10, prevent_window_shrinkage = FALSE)
ww <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(w), trendecon:::aggregate_windows(w2))
ww
dd <- select(dd, -n)
ww <- select(ww, -n)
mm <- select(mm, -n)
wd <- tempdisagg::td(ww ~ dd, method = "fast", conversion = "mean")
wd <- predict(wd)
wd
# download monthly series
m <- ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from, stepsize = "1 month", windowsize = "15 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
# download monthly series
m <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from, stepsize = "1 month", windowsize = "15 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- select(mm, -n)
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "20 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- trendecon:::aggregate_averages(aggregate_windows(m), trendecon:::aggregate_windows(m2))
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "20 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- select(mm, -n)
mm <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(m), trendecon:::aggregate_windows(m2))
mm <- select(mm, -n)
mwd <- tempdisagg::td(mm ~ wd, method = "fast", conversion = "mean")
keyword = "arbeitslos"
geo = "DE"
from <- "2020-01-01"
d <- trendecon:::ts_gtrends_windows(keyword = keyword, geo = geo, from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 348, wait = 20, retry = 10, prevent_window_shrinkage = TRUE)
d2 <- trendecon:::ts_gtrends_windows(keyword = keyword, geo = geo, from = seq(Sys.Date(),
length.out = 2, by = "-90 days")[2], stepsize = "1 day",
windowsize = "3 months", n_windows = 12, wait = 20,
retry = 10, prevent_window_shrinkage = FALSE)
dd <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
w <- trendecon:::ts_gtrends_windows(keyword = keyword, geo = geo, from = from,
stepsize = "11 weeks", windowsize = "5 years",
n_windows = 68, wait = 20, retry = 10, prevent_window_shrinkage = TRUE)
w2 <- trendecon:::ts_gtrends_windows(keyword = keyword, geo = geo, from = seq(Sys.Date(),
length.out = 2, by = "-1 year")[2], stepsize = "1 week",
windowsize = "1 year", n_windows = 12, wait = 20,
retry = 10, prevent_window_shrinkage = FALSE)
ww <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(w), trendecon:::aggregate_windows(w2))
# download monthly series
m <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from, stepsize = "1 month", windowsize = "15 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "20 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(m), trendecon:::aggregate_windows(m2))
dd <- select(dd, -n)
ww <- select(ww, -n)
mm <- select(mm, -n)
wd <- tempdisagg::td(ww ~ dd, method = "fast", conversion = "mean")
wd <- predict(wd)
mwd <- tempdisagg::td(mm ~ wd, method = "fast", conversion = "mean")
m2
m
?ts_gtrends_windows
# download monthly series
m <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "15 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "15 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(m), trendecon:::aggregate_windows(m2))
mm <- select(mm, -n)
mwd <- tempdisagg::td(mm ~ wd, method = "fast", conversion = "mean")
mm
any_of(is.na(mm$value))
any(is.na(mm$value))
mwd <- tempdisagg:::td(mm ~ wd, method = "fast", conversion = "mean")
tempdisagg:::td
wd
mm
# download monthly series
m <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "15 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "20 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(m), trendecon:::aggregate_windows(m2))
dd <- select(dd, -n)
ww <- select(ww, -n)
mm <- select(mm, -n)
wd <- tempdisagg:::td(ww ~ dd, method = "fast", conversion = "mean")
wd <- predict(wd)
ww
dd
mm
wd
mwd <- tempdisagg:::td(wd ~ mm, method = "fast", conversion = "mean")
tempdisagg::td
library(tempdisagg)
