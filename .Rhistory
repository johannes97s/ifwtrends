weekcas <- weekcas2 %>%
filter(location %in% n) %>%
mutate(cases = cases/10)
mob <- mob2 %>%
filter(location %in% n)
dat <- left_join(weekcas, vacrate, by = c("location","date")) %>%
mutate(date = as.Date(date)) %>%
left_join(mutate(mob, date = as.Date(date))) %>%
mutate(people_fully_vaccinated_per_hundred = if_else(date <= as.Date("2021-01-01"), 0, people_fully_vaccinated_per_hundred)) %>%
mutate(date = as.yearmon(date)) %>%
group_by(location, date) %>%
mutate(
vaccinated = mean(people_fully_vaccinated_per_hundred, na.rm = T),
cases = mean(cases, na.rm = T),
retail_and_recreation = mean(retail_and_recreation_percent_change_from_baseline, na.rm = T),
.keep = "unused"
) %>%
unique() %>%
group_by(location) %>%
mutate(date = date,
cases = cases,
vaccinated = vaccinated,
cases_chg = (cases-lag(cases)),
vaccinated_chg = (vaccinated - lag(vaccinated)),
retail_and_recreation_chg = (retail_and_recreation - lag(retail_and_recreation)),
.keep = "used") %>%
ungroup() %>%
mutate(vaccinated_chg = if_else(date <= as.yearmon("Jan 2021"), 0, vaccinated_chg)) %>%
mutate(across(everything(), ~na_if(., Inf))) %>%
mutate(across(everything(), ~na_if(., -Inf))) %>%
drop_na() %>%
#mutate(key = as.factor(vaccinated >= 40)) %>%
#mutate(level = cut(vaccinated, breaks = c(0,20,40,60,100), include.lowest = T)) %>%
drop_na()
f <- function(x){
lm(retail_and_recreation_chg ~ cases_chg, data = x)}
stargazer(f(dat),
type = "latex",
out = "~/mobility/all_individuals.tex",
report=("vc*p"))
1789+116+86+41
library(devtools)
check(ifwtrends)
install("~/ifwtrends")
install("~//ifwtrends")
install("~\ifwtrends")
install("~//ifwtrends")
install("~/Documents/ifwtrends")
install("~/Documents/ifwtrends")
install("~/Documents/ifwtrends")
load_all()
load_all()
install("~/Documents/ifwtrends")
install()
library(devtools9
library(devtools)
library(devtools9
install()
library(ifwtrends)
library(dplyr)
library(tibble)
library(ggplot2)
include_graphics(common_trend.png)
library(ifwtrends)
library(knitr)
library(dplyr)
library(tibble)
library(ggplot2)
include_graphics(common_trend.png)
include_graphics("common_trend.png")
AirPassengers
include_graphics("common_trend.png")
keyword = "arbeitslos"
geo = "DE"
from = "2006-01-01"
trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 400, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 4, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
max(.Last.value$time)
from = as.Date("2006-01-01")
Sys.Date() - from
5756-180
5576/15
Sys.Date() - from-180
(Sys.Date() - from-180)/15
as.numeric((Sys.Date() - from-180)/15)
from + 11*7*88
Sys.Date() - from
library(lubridate)
Sys.Date() - from - year(5)
Sys.Date() - from - years(5)
years(5)
Sys.Date() - from - years(5)
days(Sys.Date() - from) - years(5)
Sys.Date() - from - 5*365
3931/(11*7)
(Sys.Date() - from - 5*365)/(11*7)
365/15
(Sys.Date() - from - 15*365)/(30)
find_external_resources("vignettes/Demo.R", encoding = "UTF-8")
![comtrend](path.expand("/vignettes/common_trend.png"))
Im Abschnitt  beschreiben wir, wie um diesen Trend bereinigt werden kann und wie dies in unserem Paket implementiert ist.
![comtrend](path.expand("/vignettes/common_trend.png"))
Im Abschnitt  beschreiben wir, wie um diesen Trend bereinigt werden kann und wie dies in unserem Paket implementiert ist.
getwd()
\@ref(trendadj) zeigt die um diesen gemeinsamen Trend bereinigten Reihen.
![trendadj](common_trend_adj.png)
Sys.Date() - from
keyword = "arbeitslos"
geo = "DE"
from = as.Date("2006-01-01")
Sys.Date() - from
Sys.Date() - from - 365*20
#'@return Tabelle der taeglichen Werten
#'@examples \dontrun{
#' daily_series(keyword = "Ikea", geo = "NL", from = "2021-01-01")
#' }
#'@import gtrendsR trendecon tsbox lubridate zoo tibble tempdisagg magrittr
#'@importFrom dplyr select
#'@importFrom dplyr mutate
#'@importFrom dplyr filter
#'@importFrom stats time
#'@export
daily_series <- function(keyword = c("arbeitslos"),
geo = "DE",
from = "2006-01-01"){
d <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = as.numeric((Sys.Date() - from-180)/15) + 50, wait = 20, retry = 10, #n_windows calculated such that it reaches up to current date
prevent_window_shrinkage = TRUE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2], #Heute -90 Tage
stepsize = "1 day", windowsize = "3 months",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
dd <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
# download weekly series
w <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "11 weeks", windowsize = "5 years",
n_windows = as.numeric((Sys.Date() - from - 5*365)/(11*7)) + 10, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
w2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-1 year")[2],
stepsize = "1 week", windowsize = "1 year",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
ww <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(w), trendecon:::aggregate_windows(w2))
# download monthly series
m <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "15 years",
n_windows = (Sys.Date() - from - 15*365)/(30) + 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "20 years", ###Hier evtl aufpassen, geht nur bis 2026!
n_windows = 1, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(m), trendecon:::aggregate_windows(m2))
dd <- select(dd, -n)
ww <- select(ww, -n)
mm <- select(mm, -n)
ww %>%
mutate(week = lubridate::week(time), year = lubridate::year(time)) %>%
filter(week <= 52) %>%
select(time, value) -> ww
dd <- ts_regular(ts_dts(dd))
dd$value <- 0.5*(na.locf(dd$value,fromLast =TRUE) + na.locf(dd$value))
ww <-  ts_regular(ts_dts(ww))
ww$value <- 0.5*(na.locf(ww$value,fromLast =TRUE) + na.locf(ww$value))
mm <-  ts_regular(ts_dts(mm))
mm$value <- 0.5*(na.locf(mm$value,fromLast =TRUE) + na.locf(mm$value))
# mm %>%
#   mutate(week = week(time), year = year(time)) %>%
#   group_by(week, year) %>%
#   mutate(value = mean(value)) %>%
#   ungroup() %>%
#   select( - time) %>%
#   filter(week <= 52) %>%
#   unique() %>%
#   bind_cols(time = ww$time) %>%
#   select(time, value)-> mm
wd <- tempdisagg::td(ww ~ dd, method = "fast", conversion = "mean")
wd <- stats::predict(wd)
mwd <- tempdisagg::td(mm ~ wd, method = "fast", conversion = "mean")
mwd <- stats::predict(mwd)
as_tibble(mwd)
}
daily_series()
@export
library(tsbox)
library(gtrendsR)
library(trendecon)
library(tidyverse)
library(zoo)
library(lubridate)
#'@return Tabelle der taeglichen Werten
#'@examples \dontrun{
#' daily_series(keyword = "Ikea", geo = "NL", from = "2021-01-01")
#' }
#'@import gtrendsR trendecon tsbox lubridate zoo tibble tempdisagg magrittr
#'@importFrom dplyr select
#'@importFrom dplyr mutate
#'@importFrom dplyr filter
#'@importFrom stats time
#'@export
daily_series <- function(keyword = c("arbeitslos"),
geo = "DE",
from = "2006-01-01"){
d <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = as.numeric((Sys.Date() - from-180)/15) + 50, wait = 20, retry = 10, #n_windows calculated such that it reaches up to current date
prevent_window_shrinkage = TRUE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2], #Heute -90 Tage
stepsize = "1 day", windowsize = "3 months",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
dd <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
# download weekly series
w <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "11 weeks", windowsize = "5 years",
n_windows = as.numeric((Sys.Date() - from - 5*365)/(11*7)) + 10, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
w2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-1 year")[2],
stepsize = "1 week", windowsize = "1 year",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
ww <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(w), trendecon:::aggregate_windows(w2))
# download monthly series
m <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "15 years",
n_windows = (Sys.Date() - from - 15*365)/(30) + 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "20 years", ###Hier evtl aufpassen, geht nur bis 2026!
n_windows = 1, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(m), trendecon:::aggregate_windows(m2))
dd <- select(dd, -n)
ww <- select(ww, -n)
mm <- select(mm, -n)
ww %>%
mutate(week = lubridate::week(time), year = lubridate::year(time)) %>%
filter(week <= 52) %>%
select(time, value) -> ww
dd <- ts_regular(ts_dts(dd))
dd$value <- 0.5*(na.locf(dd$value,fromLast =TRUE) + na.locf(dd$value))
ww <-  ts_regular(ts_dts(ww))
ww$value <- 0.5*(na.locf(ww$value,fromLast =TRUE) + na.locf(ww$value))
mm <-  ts_regular(ts_dts(mm))
mm$value <- 0.5*(na.locf(mm$value,fromLast =TRUE) + na.locf(mm$value))
# mm %>%
#   mutate(week = week(time), year = year(time)) %>%
#   group_by(week, year) %>%
#   mutate(value = mean(value)) %>%
#   ungroup() %>%
#   select( - time) %>%
#   filter(week <= 52) %>%
#   unique() %>%
#   bind_cols(time = ww$time) %>%
#   select(time, value)-> mm
wd <- tempdisagg::td(ww ~ dd, method = "fast", conversion = "mean")
wd <- stats::predict(wd)
mwd <- tempdisagg::td(mm ~ wd, method = "fast", conversion = "mean")
mwd <- stats::predict(mwd)
as_tibble(mwd)
}
daily_series()
#'@return Tabelle der taeglichen Werten
#'@examples \dontrun{
#' daily_series(keyword = "Ikea", geo = "NL", from = "2021-01-01")
#' }
#'@import gtrendsR trendecon tsbox lubridate zoo tibble tempdisagg magrittr
#'@importFrom dplyr select
#'@importFrom dplyr mutate
#'@importFrom dplyr filter
#'@importFrom stats time
#'@export
daily_series <- function(keyword = c("arbeitslos"),
geo = "DE",
from = "2006-01-01"){
n1 <- as.numeric((Sys.Date() - from-180)/15) + 50
str(n1)
d <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = n1, wait = 20, retry = 10, #n_windows calculated such that it reaches up to current date
prevent_window_shrinkage = TRUE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2], #Heute -90 Tage
stepsize = "1 day", windowsize = "3 months",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
dd <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
# download weekly series
n2 <- as.numeric((Sys.Date() - from - 5*365)/(11*7)) + 10
str(n2)
w <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "11 weeks", windowsize = "5 years",
n_windows = n2, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
w2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-1 year")[2],
stepsize = "1 week", windowsize = "1 year",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
ww <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(w), trendecon:::aggregate_windows(w2))
# download monthly series
n3 <- as.numeric(Sys.Date() - from - 15*365)/(30) + 12
str(n3)
m <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "15 years",
n_windows = n3, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "20 years", ###Hier evtl aufpassen, geht nur bis 2026!
n_windows = 1, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(m), trendecon:::aggregate_windows(m2))
dd <- select(dd, -n)
ww <- select(ww, -n)
mm <- select(mm, -n)
ww %>%
mutate(week = lubridate::week(time), year = lubridate::year(time)) %>%
filter(week <= 52) %>%
select(time, value) -> ww
dd <- ts_regular(ts_dts(dd))
dd$value <- 0.5*(na.locf(dd$value,fromLast =TRUE) + na.locf(dd$value))
ww <-  ts_regular(ts_dts(ww))
ww$value <- 0.5*(na.locf(ww$value,fromLast =TRUE) + na.locf(ww$value))
mm <-  ts_regular(ts_dts(mm))
mm$value <- 0.5*(na.locf(mm$value,fromLast =TRUE) + na.locf(mm$value))
# mm %>%
#   mutate(week = week(time), year = year(time)) %>%
#   group_by(week, year) %>%
#   mutate(value = mean(value)) %>%
#   ungroup() %>%
#   select( - time) %>%
#   filter(week <= 52) %>%
#   unique() %>%
#   bind_cols(time = ww$time) %>%
#   select(time, value)-> mm
wd <- tempdisagg::td(ww ~ dd, method = "fast", conversion = "mean")
wd <- stats::predict(wd)
mwd <- tempdisagg::td(mm ~ wd, method = "fast", conversion = "mean")
mwd <- stats::predict(mwd)
as_tibble(mwd)
}
daily_series(keyword = keyword,
geo = geo,
from = from)
t<-.Last.value
t
plot(t)
plot(t, t = "l")
t %>% mutate(time = floor_date(time, "month"))
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value))
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) <- t2
t2 <- t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value))
plot(t2)
plot(select(t2, time, m), t ="l")
s<-ts_gtrends("arbeitslos", "DE", time = "2006-01-01 05-10-2021")
s<-ts_gtrends("arbeitslos", geo = "DE", time = "2006-01-01 05-10-2021")
s<-ts_gtrends(keyword = "arbeitslos", geo = "DE", time = "2006-01-01 05-10-2021")
s<-ts_gtrends(keyword = "arbeitslos", geo = "DE", time = "2006-01-01 2021-10-05")
s
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
left_join(s)
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
right_join(s)
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
right_join(mutate(s, orig = value))
t
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value))
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
left_join(mutate(s, orig = value))
s
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
left_join(mutate(s, orig = value), by = "time")
t2 <- t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
left_join(mutate(s, orig = value, keep = "used"), by = "time")
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
left_join(mutate(s, orig = value, keep = "used"), by = "time")
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value))
s
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value))
t2 <- t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value))
plot(select(t2, time, m), t ="l")
linex(s)
lines(s)
s<-ts_gtrends(keyword = "arbeitslos", geo = "DE", time = "2006-01-01 2021-10-05")
plot(select(t2, time, m), t ="l")
lines(s, col = "r")
lines(s, col = "red")
s
print(t2, n = 300)
s
tail(s)
tail(t2)
path("..")
path.expand("..")
path.expand("...")
path.expand(".")
path.expand(.)
path.expand("~")
?caret
