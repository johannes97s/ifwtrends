transmute_at(.vars = vars(-time), .funs =  mean) %>%
ungroup() %>%
unique
})
r_raw
r_raw <- c(r1, r2[-c(1:12)])
r_raw <- lapply(r_raw, function(x){
mutate(x, time = floor_date(time, "quarter")) %>%
group_by(time) %>%
transmute_at(.vars = vars(-time), .funs =  mean) %>%
ungroup() %>%
unique
})
r_raw <- lapply(r_raw, function(x) select(x,time, contains("lag_0")))
r_raw <- lapply(r_raw, function(x) mutate(x, across(.cols = -1, function(x) c(0, diff(x, 1))), .keep = "used"))
r_raw <- lapply(r_raw, function(x) relocate(bind_cols(x, dat[1:nrow(x),]), time, dat = value))
r_factors <- lapply(r_raw, function(x){
pc <- as_tibble(prcomp(x[-c(1,2)])$x)
bind_cols(x[c(1,2)], pc[,1:10])
})
r <- r_raw
build_model <- function(series){
y <- as.matrix(series[2])
x <- as.matrix(series[-c(1,2)])
cv <- cv.glmnet(x, y, alpha = 1)
model <- glmnet(x, y, alpha = 1, lambda = cv$lambda.min)
model
# model <- lm(dat ~ ., data = series[-1])
# model
#summary(model)$coefficients[,4]
}
covariats <- lapply(r, function(x) as.matrix(x[-c(1,2)]))
models <- lapply(r, function(x) build_model(x))
r_raw
build_model <- function(series){
y <- as.matrix(series[2])
x <- as.matrix(series[-c(1,2)])
cv <- cv.glmnet(x, y, alpha = 1)
model <- glmnet(x, y, alpha = 1, lambda = cv$lambda.min)
model
# model <- lm(dat ~ ., data = series[-1])
# model
#summary(model)$coefficients[,4]
}
covariats <- lapply(r, function(x) as.matrix(x[-c(1,2)]))
models <- lapply(r, function(x) build_model(x))
build_model <- function(series){
y <- as.matrix(series[2])
x <- as.matrix(series[-c(1,2)])
cv <- cv.glmnet(x, y, alpha = 0)
model <- glmnet(x, y, alpha = 0, lambda = cv$lambda.min)
model
# model <- lm(dat ~ ., data = series[-1])
# model
#summary(model)$coefficients[,4]
}
covariats <- lapply(r, function(x) as.matrix(x[-c(1,2)]))
models <- lapply(r, function(x) build_model(x))
pred_values <- mapply(predict, lag(models)[-1], covariats[-1])
r
r_raw <- c(r1, r2[-c(1:12)])
r_raw <- lapply(r_raw, function(x){
mutate(x, time = floor_date(time, "quarter")) %>%
group_by(time) %>%
transmute_at(.vars = vars(-time), .funs =  mean) %>%
ungroup() %>%
unique
})
r_raw <- lapply(r_raw, function(x) select(x,time, contains("lag_0")))
r_raw <- lapply(r_raw, function(x) mutate(x, across(.cols = -1, function(x) c(0, diff(x, 1))), .keep = "used"))
r_raw <- lapply(r_raw, function(x) relocate(bind_cols(x, dat[1:nrow(x),]), time, dat = value))
r_factors <- lapply(r_raw, function(x){
pc <- as_tibble(prcomp(x[-c(1,2)])$x)
bind_cols(x[c(1,2)], pc[,1:10])
})
r <- r_raw
build_model <- function(series){
y <- as.matrix(series[2])
x <- as.matrix(series[-c(1,2)])
cv <- cv.glmnet(x, y, alpha = 0)
model <- glmnet(x, y, alpha = 0, lambda = cv$lambda.min)
model
# model <- lm(dat ~ ., data = series[-1])
# model
#summary(model)$coefficients[,4]
}
covariats <- lapply(r, function(x) as.matrix(x[-c(1,2)]))
models <- lapply(r, function(x) build_model(x))
lapply(r_raw, function(df) apply(df, 2, function(x) any(is.na(x))))
View(dat)
consexp %>%
mutate(value = log(as.numeric(value))) %>%
mutate(value = c(0, diff(value, 1))) %>%
filter(is.na(.)) %>%
consexp %>%
mutate(value = log(as.numeric(value))) %>%
mutate(value = c(0, diff(value, 1))) %>%
filter(is.na(.))
consexp %>%
mutate(value = log(as.numeric(value))) %>%
mutate(value = c(0, diff(value, 1))) %>%
filter(!is.na(.))
View(dat)
dat <- consexp %>%
mutate(value = log(as.numeric(value))) %>%
mutate(value = c(0, diff(value, 1))) %>%
filter(!is.na(.)) %>%
filter(time >= as_date(start), time <= as_date(end))
View(dat)
dat <- consexp %>%
mutate(value = log(as.numeric(value))) %>%
mutate(value = c(0, diff(value, 1))) %>%
filter(time >= as_date(start), time <= as_date(end)) %>%
drop_na()
View(dat)
r1 <- readRDS("data/retail_gindex_roll_1219")
r2 <- readRDS("data/retail_gindex_roll_0721")
r_raw <- c(r1, r2[-c(1:12)])
r_raw <- lapply(r_raw, function(x){
mutate(x, time = floor_date(time, "quarter")) %>%
group_by(time) %>%
transmute_at(.vars = vars(-time), .funs =  mean) %>%
ungroup() %>%
unique
})
r_raw <- lapply(r_raw, function(x) select(x,time, contains("lag_0")))
r_raw <- lapply(r_raw, function(x) mutate(x, across(.cols = -1, function(x) c(0, diff(x, 1))), .keep = "used"))
r_raw <- lapply(r_raw, function(x) relocate(bind_cols(x, dat[1:nrow(x),]), time, dat = value))
tail(r_raw[[1]])
tail(r_raw[[43]])
tail(r_raw[[42]])
r_raw <- c(r1, r2[-c(1:12,31)])
r_raw <- lapply(r_raw, function(x){
mutate(x, time = floor_date(time, "quarter")) %>%
group_by(time) %>%
transmute_at(.vars = vars(-time), .funs =  mean) %>%
ungroup() %>%
unique
})
r_raw <- lapply(r_raw, function(x) select(x,time, contains("lag_0")))
r_raw <- lapply(r_raw, function(x) mutate(x, across(.cols = -1, function(x) c(0, diff(x, 1))), .keep = "used"))
r_raw <- lapply(r_raw, function(x) relocate(bind_cols(x, dat[1:nrow(x),]), time, dat = value))
r_factors <- lapply(r_raw, function(x){
pc <- as_tibble(prcomp(x[-c(1,2)])$x)
bind_cols(x[c(1,2)], pc[,1:10])
})
r <- r_raw
build_model <- function(series){
y <- as.matrix(series[2])
x <- as.matrix(series[-c(1,2)])
cv <- cv.glmnet(x, y, alpha = 0)
model <- glmnet(x, y, alpha = 0, lambda = cv$lambda.min)
model
# model <- lm(dat ~ ., data = series[-1])
# model
#summary(model)$coefficients[,4]
}
covariats <- lapply(r, function(x) as.matrix(x[-c(1,2)]))
models <- lapply(r, function(x) build_model(x))
pred_values <- mapply(predict, lag(models)[-1], covariats[-1])
last_values <- sapply(pred_values, last)
forec <- tibble(time = seq.Date(as.Date(start_period_1)+months(1), as.Date(end_2), by ="month"),
value = last_values) %>%
left_join(dat, by = "time") %>%
rename(index = value.x, retail =value.y)
seq.Date
?seq.Date
forec <- tibble(time = seq.Date(as.Date(start_period_1), as.Date(end_2), by ="quarter"),
value = last_values) %>%
left_join(dat, by = "time") %>%
rename(index = value.x, retail =value.y)
last_values
forec <- tibble(time = last(r_raw)$time,
value = last_values) %>%
left_join(dat, by = "time") %>%
rename(index = value.x, retail =value.y)
r_raw
r_raw[[42]]
tail(r_raw[[42]])
as.Date(end_2)-quarter(1)
as.Date(end_2)
as.Date(end_2)-quarters(1)
as.Date(end_2)-months(3)
as.Date(end_2)-month(3)
forec <- tibble(time = seq.Date(as.Date(start_period_1), as.Date("2021-04-01"), by = "quarter"),
value = last_values) %>%
left_join(dat, by = "time") %>%
rename(index = value.x, retail =value.y)
_las_values
last_values
forec <- tibble(time = seq.Date(as.Date(start_period_1), as.Date(end_2), by ="month"),
value = last_values) %>%
left_join(dat, by = "time") %>%
rename(index = value.x, retail =value.y)
as.Date(end_2)
as.Date(end_2)-months(2)
forec <- tibble(time = seq.Date(as.Date(start_period_1), as.Date(end_2)-months(2), by ="month"),
value = last_values) %>%
left_join(dat, by = "time") %>%
rename(index = value.x, retail =value.y)
sqrt(sum((forec$index - forec$retail)^2))
forec %>%
pivot_longer(cols = -time, names_to = "id", values_to = "value") %>%
ggplot(aes(x=  time, y = value, color = id)) +
geom_line()
forec
dat
forec <- tibble(time = seq.Date(as.Date(start_period_1), as.Date(end_2)-months(2), by ="month"),
value = last_values) %>%
left_join(dat, by = "time") %>%
rename(index = value.x, retail =value.y) %>%
drop_na()
sqrt(sum((forec$index - forec$retail)^2))
forec %>%
pivot_longer(cols = -time, names_to = "id", values_to = "value") %>%
ggplot(aes(x=  time, y = value, color = id)) +
geom_line()
dat
View(dat)
conexp
consexp <- readxl::read_xlsx("data/consumer_exp_GER.xlsx") %>%
transmute(time = floor_date(as.Date(Name), "quarter"), value = `BD CONSUMER EXPENDITURE CONA`)
consexp
consexp %>%
mutate(value = (value-lag(value))/abs(lag(value)))
consexp %>%
mutate(value = value/lag(value) -1 )
consexp <- readxl::read_xlsx("data/consumer_exp_GER.xlsx") %>%
transmute(time = floor_date(as.Date(Name), "quarter"), value = `BD CONSUMER EXPENDITURE CONA`)
consexp
consexp <- readxl::read_xlsx("data/consumer_exp_GER.xlsx") %>%
transmute(time = floor_date(as.Date(Name), "quarter"), value = as.numeric(`BD CONSUMER EXPENDITURE CONA`))
consexp %>%
mutate(value = value/lag(value) -1 )
dat <- consexp %>%
mutate(value = value/lag(value) -1 ) %>%
filter(time >= as_date(start), time <= as_date(end)) %>%
drop_na()
View(dat)
build_model <- function(series){
y <- as.matrix(series[2])
x <- as.matrix(series[-c(1,2)])
cv <- cv.glmnet(x, y, alpha = 0)
model <- glmnet(x, y, alpha = 0, lambda = cv$lambda.min)
model
# model <- lm(dat ~ ., data = series[-1])
# model
#summary(model)$coefficients[,4]
}
covariats <- lapply(r, function(x) as.matrix(x[-c(1,2)]))
models <- lapply(r, function(x) build_model(x))
pred_values <- mapply(predict, lag(models)[-1], covariats[-1])
last_values <- sapply(pred_values, last)
forec <- tibble(time = seq.Date(as.Date(start_period_1), as.Date(end_2)-months(2), by ="month"),
value = last_values) %>%
left_join(dat, by = "time") %>%
rename(index = value.x, retail =value.y) %>%
drop_na()
sqrt(sum((forec$index - forec$retail)^2))
forec %>%
pivot_longer(cols = -time, names_to = "id", values_to = "value") %>%
ggplot(aes(x=  time, y = value, color = id)) +
geom_line()
coef <- as_tibble(t(as.data.frame(models))) %>%
bind_cols(time = seq.Date(as_date(start_period_1), as_date(end_2), by = "month"))
build_model <- function(series){
y <- as.matrix(series[2])
x <- as.matrix(series[-c(1,2)])
cv <- cv.glmnet(x, y, alpha = 0)
model <- glmnet(x, y, alpha = 0, lambda = cv$lambda.min)
model
# model <- lm(dat ~ ., data = series[-1])
# model
#summary(model)$coefficients[,4]
}
covariats <- lapply(r, function(x) as.matrix(x[-c(1,2)]))
models <- lapply(r, function(x) build_model(x))
pred_values <- mapply(predict, lag(models)[-1], covariats[-1])
last_values <- sapply(pred_values, last)
forec <- tibble(time = seq.Date(as.Date(start_period_1), as.Date(end_2)-months(2), by ="month"),
value = last_values) %>%
left_join(dat, by = "time") %>%
rename(index = value.x, retail =value.y) %>%
drop_na()
sqrt(sum((forec$index - forec$retail)^2))
forec %>%
pivot_longer(cols = -time, names_to = "id", values_to = "value") %>%
ggplot(aes(x=  time, y = value, color = id)) +
geom_line()
r <- r_factors
r <- r_factors
r <- r_factors
r_factors <- lapply(r_raw, function(x){
pc <- as_tibble(prcomp(x[-c(1,2)])$x)
bind_cols(x[c(1,2)], pc[,1:10])
})
r <- r_factors
build_model <- function(series){
y <- as.matrix(series[2])
x <- as.matrix(series[-c(1,2)])
cv <- cv.glmnet(x, y, alpha = 0)
model <- glmnet(x, y, alpha = 0, lambda = 0)#cv$lambda.min)
model
# model <- lm(dat ~ ., data = series[-1])
# model
#summary(model)$coefficients[,4]
}
covariats <- lapply(r, function(x) as.matrix(x[-c(1,2)]))
models <- lapply(r, function(x) build_model(x))
pred_values <- mapply(predict, lag(models)[-1], covariats[-1])
last_values <- sapply(pred_values, last)
forec <- tibble(time = seq.Date(as.Date(start_period_1), as.Date(end_2)-months(2), by ="month"),
value = last_values) %>%
left_join(dat, by = "time") %>%
rename(index = value.x, consump =value.y) %>%
drop_na()
sqrt(sum((forec$index - forec$retail)^2))
forec %>%
pivot_longer(cols = -time, names_to = "id", values_to = "value") %>%
ggplot(aes(x=  time, y = value, color = id)) +
geom_line()
sqrt(sum((forec$index - forec$consump)^2))
category_ret = c(560, 121,
277, 123,
988, 68,
660, 658, 466, 465, 659, 948,
270, 271, 137, 158,
646, 249, 256,
898, 289, #Hier 3 Kategorien fÃ¼r Autokauf von RWI ausgelassen
382, 383,
355, 41, 439, 3, 1010, 432, 882, 614, 78, 408,
74,
179, 276,
7, 143, 146, 508, 38)
category_ret = c(560, 121,
277, 123,
988, 68,
660, 658, 466, 465, 659, 948,
270, 271, 137, 158,
646, 249, 256,
468, 898, 473, 815, 289,
382, 383,
355, 41, 439, 3, 1010, 432, 882, 614, 78, 408,
74,
179, 276,
7, 143, 146, 508, 38)
category_test = c(560,121,277)
res_raw <- g_index(keyword = NA, category = category_test,
time = str_c(start, " ", end),
lags = 2)
#' @importFrom tidyr pivot_wider
#' @importFrom stats prcomp
#' @importFrom tidyselect any_of
#' @importFrom lubridate as_date
#' @importFrom stringr str_c
#' @importFrom gtrendsR gtrends
#' @examples \dontrun{
#' g_index(keyword = c("ikea", "saturn"), time = "2018-01-01 2021-01-01")
#' }
#' @export
g_index <- function(keyword = NA,
category = 0,
geo = "DE",
time = str_c("2006-01-01 ", Sys.Date()),
lags = 0) {
start <- str_sub(time, 1, 10)
end <- str_sub(time, 12, 21)
dates <- seq.Date(from = as.Date(start), to = as.Date(end), by = "month")
# data containing a trend calculated on 200 GTrends time series'.
fit <- readRDS("data/comtrend.rds") %>%
select(time = date, trend) %>%
filter(time >= as.Date(start))
g_dat2 <- ts_gtrends(
keyword = keyword,
category = category,
geo = "DE",
time = time
) %>%
mutate(value = log(value)) %>%
mutate(value = replace(value, value == -Inf, NA_real_)) %>%
mutate(value = na.approx(value, rule = 2))
if (!("id" %in% names(g_dat2))) {
# Add category
g_dat2 <- mutate(
g_dat2,
id = as.character(
as.vector(sapply(category, rep, length(dates)))
)
)
}
g_dat_adj <- g_dat2 %>%
left_join(fit, by = "time") %>%
mutate(time = as.Date(time), adj = value - trend) %>%
select(id, time, adj) %>%
seas_adj(freq = "quarter", method = "arima") %>%
rename(s_adj = value) %>%
unique()
if (!("id" %in% names(g_dat_adj))) {
g_dat_adj <- mutate(
g_dat_adj,
id = as.character(rep(category, each = length(dates)))
)
}
index <- g_dat_adj %>%
group_by(id)
# Add lagged columns
if (lags >= 1) index <- mutate(index, lag_1 = lag(s_adj))
if (lags >= 2) index <- mutate(index, lag_2 = lag(s_adj, 2))
if (lags >= 3) index <- mutate(index, lag_3 = lag(s_adj, 3))
if (lags == 4) index <- mutate(index, lag_4 = lag(s_adj, 4))
index <- index %>%
ungroup() %>%
rename(lag_0 = s_adj) %>%
filter(across(everything(), ~ !is.na(.))) %>%
pivot_longer(cols = -c(id, time), names_to = "lag", values_to = "value") %>%
pivot_wider(names_from = c(id, lag), values_from = value)
return(index)
}
#' @importFrom tidyr pivot_wider
#' @importFrom stats prcomp
#' @importFrom tidyselect any_of
#' @importFrom lubridate as_date
#' @importFrom stringr str_c
#' @importFrom gtrendsR gtrends
#' @examples \dontrun{
#' g_index(keyword = c("ikea", "saturn"), time = "2018-01-01 2021-01-01")
#' }
#' @export
g_index <- function(keyword = NA,
category = 0,
geo = "DE",
time = str_c("2006-01-01 ", Sys.Date()),
lags = 0) {
start <- str_sub(time, 1, 10)
end <- str_sub(time, 12, 21)
dates <- seq.Date(from = as.Date(start), to = as.Date(end), by = "month")
# data containing a trend calculated on 200 GTrends time series'.
fit <- readRDS("data/comtrend.rds") %>%
select(time = date, trend) %>%
filter(time >= as.Date(start))
g_dat2 <- ts_gtrends(
keyword = keyword,
category = category,
geo = "DE",
time = time
) %>%
mutate(value = log(value)) %>%
mutate(value = replace(value, value == -Inf, NA_real_)) %>%
mutate(value = na.approx(value, rule = 2))
if (!("id" %in% names(g_dat2))) {
# Add category
g_dat2 <- mutate(
g_dat2,
id = as.character(
as.vector(sapply(category, rep, length(dates)))
)
)
}
g_dat_adj <- g_dat2 %>%
left_join(fit, by = "time") %>%
mutate(time = as.Date(time), adj = value - trend) %>%
select(id, time, adj) %>%
seas_adj(freq = "quarter", method = "arima") %>%
rename(s_adj = value) %>%
unique()
if (!("id" %in% names(g_dat_adj))) {
g_dat_adj <- mutate(
g_dat_adj,
id = as.character(rep(category, each = length(dates)))
)
}
index <- g_dat_adj %>%
group_by(id)
# Add lagged columns
if (lags >= 1) index <- mutate(index, lag_1 = lag(s_adj))
if (lags >= 2) index <- mutate(index, lag_2 = lag(s_adj, 2))
if (lags >= 3) index <- mutate(index, lag_3 = lag(s_adj, 3))
if (lags == 4) index <- mutate(index, lag_4 = lag(s_adj, 4))
index <- index %>%
ungroup() %>%
rename(lag_0 = s_adj) %>%
filter(across(everything(), ~ !is.na(.))) %>%
pivot_longer(cols = -c(id, time), names_to = "lag", values_to = "value") %>%
pivot_wider(names_from = c(id, lag), values_from = value)
return(index)
}
res_raw <- g_index(keyword = NA, category = category_test,
time = str_c(start, " ", end),
lags = 2)
category_ret = c(560, 121,
277, 123,
988, 68,
660, 658, 466, 465, 659, 948,
270, 271, 137, 158,
646, 249, 256,
468, 898, 473, 815, 289,
382, 383,
355, 41, 439, 3, 1010, 432, 882, 614, 78, 408,
74,
179, 276,
7, 143, 146, 508, 38)
################################################
start_series = "2006-01-01"
start_period_0 = "2016-01-01"
end_0 = "2017-12-31"
r0 <-  roll(keyword = NA,
category = category_ret,
start_series = start_series,
start_period = start_period_0,
end = end_0,
fun = g_index,
lags = 2)
