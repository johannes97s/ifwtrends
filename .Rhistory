<<<<<<< Updated upstream
View(l)
rm(l)
=======
summary(model)$coefficients[,4]
}
models <- lapply(lag(r1)[-1], build_model)
coef <- as_tibble(t(as.data.frame(models))) %>%
bind_cols(time = seq.Date(as_date(start_period)+months(1), as_date(end), by = "month"))
seq.Date(as_date(start_period)+months(1), as_date(end), by = "month")
start_series = "2006-01-01"
start_period = "2015-01-01"
end = "2019-12-31"
coef <- as_tibble(t(as.data.frame(models))) %>%
bind_cols(time = seq.Date(as_date(start_period)+months(1), as_date(end), by = "month"))
coef %>%
pivot_longer(cols = -time, names_to = "coef", values_to = "pValue") %>%
group_by(coef) %>%
mutate(mean = mean(pValue)) %>%
filter(mean <= 0.4) %>%
ggplot(aes(x = time, y = pValue, color = coef)) +
geom_line() +
geom_hline(yintercept = 0.1) +
facet_grid(coef ~ .)
coef
print(coef[c(2,16)], n = 60)
coef[2,59]
coef[59,2]
as.numeric(coef[59,2])
models[[59]]
models <- lapply(r1[-60], build_model)
coef <- as_tibble(t(as.data.frame(models))) %>%
bind_cols(time = seq.Date(as_date(start_period)+months(1), as_date(end), by = "month"))
print(coef[c(2,16)], n = 60)
models <- lapply(r1[-60], build_model)
coef <- as_tibble(t(as.data.frame(models))) %>%
bind_cols(time = seq.Date(as_date(start_period)+months(1), as_date(end), by = "month"))
models <- lapply(r1[-60], build_model)
coef <- as_tibble(t(as.data.frame(models))) %>%
bind_cols(time = seq.Date(as_date(start_period)+months(1), as_date(end), by = "month"))
models <- lapply(r1[-1], build_model)
coef <- as_tibble(t(as.data.frame(models))) %>%
bind_cols(time = seq.Date(as_date(start_period)+months(1), as_date(end), by = "month"))
print(coef[c(2,16)], n = 60)
coef <- as_tibble(t(as.data.frame(models))) %>%
bind_cols(time = seq.Date(as_date(start_period)+months(1), as_date(end), by = "month"))
coef %>%
pivot_longer(cols = -time, names_to = "coef", values_to = "pValue") %>%
group_by(coef) %>%
mutate(mean = mean(pValue)) %>%
filter(mean <= 0.4) %>%
ggplot(aes(x = time, y = pValue, color = coef)) +
geom_line() +
geom_hline(yintercept = 0.1) +
facet_grid(coef ~ .)
library(tidyverse)
l = list()
lapply(rep(10000,10000), function(x) x+1)
lapply(rep(10000,10000), function(x) matrix(rnorm(x), ncol = 100))
l <- lapply(rep(10000,10000), function(x) matrix(rnorm(x), ncol = 100))
l
str(l)
l[[1]]
lapply(l, det)
l <- lapply(rep(100,100000), function(x) matrix(rnorm(x), ncol = 10))
lapply(l, det)
l <- lapply(rep(100,1000000), function(x) matrix(rnorm(x), ncol = 10))
lapply(l, det)
list(1:n)
as.list(1:n)
f1 <- function(n){
l = list()
for (i in 1:n){
list[i+1] <- "a"
}
}
f2 <- function(n){
lapply(as.list(1:n), function(x) x <- "a")
}
n = 1000
bench::mark(
f1(n),
f2(n)
)
as.list(1:n)[2]
as.list(1:n)[2] <- "A"
as.list(1:n)[[2]] <- "A"
as.list(1:n)[[2]]
x = 1:10
x[3] <- "a"
list(a = 1, b = "w") -> x
x[2]
x[2] <- 1
x[2] <- "a"
x
f1 <- function(n){
l = list()
for (i in 1:n){
list[i+1] <- 1
}
}
f2 <- function(n){
lapply(as.list(1:n), function(x) x <- 1)
}
n = 1000
bench::mark(
f1(n),
f2(n)
)
f1 <- function(n){
l = list()
for (i in 1:n){
l[i+1] <- 1
}
}
f2 <- function(n){
lapply(as.list(1:n), function(x) x <- 1)
}
n = 1000
bench::mark(
f1(n),
f2(n)
)
f1 <- function(n){
l = list()
for (i in 1:n){
l[i] <- 1
}
}
f2 <- function(n){
lapply(as.list(1:n), function(x) x <- 1)
}
n = 1000
bench::mark(
f1(n),
f2(n)
)
?bench::mark
lapply(as.list(1:n), function(x) x <- 1)
l = list()
for (i in 1:n){
l[i] <- 1
}
f1 <- function(n){
l = list()
for (i in 1:n){
l[i] <- 1
}
l
}
f1 <- function(n){
l = list()
for (i in 1:n){
l[i] <- 1
}
l
}
f2 <- function(n){
lapply(as.list(1:n), function(x) x <- 1)
}
n = 1000
bench::mark(
f1(n),
f2(n),
)
n = 1000
b <- bench::mark(
f1(n),
f2(n),
)
b
plot(b)
library(tidyverse)
b
plot(b)
library(ggbeeswarm)
n = 10000
b <- bench::mark(
f1(n),
f2(n),
)
b
n = 10
b <- bench::mark(
f1(n),
f2(n),
)
b
n = 100000
b <- bench::mark(
f1(n),
f2(n),
)
b
n = 1000000
b <- bench::mark(
f1(n),
f2(n),
)
n = 1000000
b <- bench::mark(
f1(n),
f2(n),
)
Sys.getenv()
Sys.getenv(JAVA_HOME)
Sys.setenv(JAVA_HOME = "C:/Program Files/OpenJDK/jre-8.0.292.10-hotspot")
library(rJava)
library(RJDemetra)
detach("package:RJDemetra", unload = TRUE)
detach("package:rJava", unload = TRUE)
Sys.getenv()
Sys.getenv()
Sys.setenv(JAVA_HOME = "C:\\Program Files\\OpenJDK\\jdk-8.0.262.10-hotspot")
library(rJava)
library(RJDemetra)
library(glmnet)
library(tidyverse)
library(ifwtrends)
library(lubridate)
library(zoo)
library(trendecon)
library(gtrendsR)
library(tsbox)
#' @import tsbox
#' @import gtrendsR
#' @import trendecon
#' @import zoo
#' @examples \dontrun{
#' g_index(keyword = c("ikea","saturn"), time = "2018-01-01 2021-01-01")
#' }
#' @importFrom gtrendsR gtrends
#' @importFrom gtrendsR gtrends
#' @export
g_index <- function(
keyword = NA,
category = 0,
geo = "DE",
time = str_c("2006-01-01 ", Sys.Date()),
lags = 0){
start <- str_sub(time, 1,10)
end <- str_sub(time, 12,21)
dates <- seq.Date(from = as.Date(start), to = as.Date(end), by = "month")
fit <- readRDS("data/comtrend.rds") %>%
select(time = date, trend) %>%
filter(time >= as.Date(start))
g_dat2 <- ts_gtrends(keyword = keyword,
category = category,
geo = "DE",
time = time) %>%
mutate(value = log(value)) %>%
mutate(value = replace(value, value == -Inf, NA_real_)) %>%
mutate(value = na.approx(value, rule = 2))
if (!("id" %in% names(g_dat2))) g_dat2 <- mutate(g_dat2, id = as.character(as.vector(sapply(category, rep, length(dates)))))
g_dat_adj <- g_dat2 %>%
left_join(fit, by = "time") %>%
mutate(time = as.Date(time), adj = value - trend) %>%
select(id, time, adj) %>%
seas_adj(freq = "quarter", method = "arima") %>%
rename(s_adj = value) %>%
unique()
if (!("id" %in% names(g_dat_adj))) g_dat_adj <- mutate(g_dat_adj, id = as.character(rep(category, each = length(dates))))
index <- g_dat_adj %>%
group_by(id)
#mutate(s_adj = c(0, diff(s_adj, 1))) %>%
if (lags >=1) index <- mutate(index, lag_1 = lag(s_adj))
if (lags >=2) index <- mutate(index, lag_2 = lag(s_adj,2))
if (lags >=3) index <- mutate(index, lag_3 = lag(s_adj,3))
if (lags == 4) index <- mutate(index, lag_3 = lag(s_adj,3))
index <- index %>%
ungroup() %>%
rename(lag_0 = s_adj) %>%
filter(across(everything(), ~!is.na(.))) %>%
pivot_longer(cols = -c(id, time), names_to = "lag", values_to = "value") %>%
pivot_wider(names_from = c(id, lag), values_from = value)
return(index)
}
start = "2006-01-01"
end = "2021-07-01"
retail <- readxl::read_xlsx("data/retail_GER.xlsx") %>%
transmute(time = floor_date(as.Date(Name), "month"), value = `BD RETAIL SALES EXCL CARS (CAL ADJ) X-12-ARIMA VOLA`)
#'series <- trendecon::ts_gtrends(c("ikea", "saturn"), time = "2018-01-01 2021-01-01")
#'seas_adj(series, freq = "month", method = "firstdiff")
#' @examples
#'series <- trendecon::ts_gtrends(c("ikea", "saturn"), time = "2018-01-01 2021-01-01")
#'seas_adj(series, freq = "month",  method = "firstdiff")
#'@import dplyr tsbox zoo
#'@import rJava
#' @importFrom RJDemetra x13
#' @importFrom gtrendsR gtrends
#'@export
seas_adj <-function(series, freq = "month", method = "arima"){
if(method == "arima"){
#Saisonbereinigung mit X-13 ARIMA
if (!("id" %in% names(series))) series <- mutate(series, id = "id")
series <- ts_ts(series)
h <- function(ts){
m <- x13(ts)
return(m$final$series[,"sa"])
}
if (identical(dim(series), NULL)){
series <- ts_tbl(h(series))
}
if (dim(series)[2] > 1){
series <- as.list(series)
series <- lapply(series, h)
n <- names(series)
t1 <- series[[1]]
for (i in 2:length(series)) t1 <- ts_c(t1, series[[i]])
dimnames(t1)[[2]] <- n
series <- ts_tbl(t1)
}
}
if(method == "firstdiff"){     #Saisonbereinigung mit ersten Differenzen mit lag = 4
#da gerade Quartalsdaten. Fuer monatsdaten lag = 12
if (!("id" %in% names(series))) series <- mutate(series, id = "id")
if (freq == "month") k = 12
if (freq == "quarter") k = 4
series <- series %>%
group_by(id) %>%
mutate(value = c(rep(0,k), diff(value, k))) %>% #Wenn Monatsdaten hier 12 statt 4
ungroup()
}
series
}
start = "2006-01-01"
end = "2021-07-01"
retail <- readxl::read_xlsx("data/retail_GER.xlsx") %>%
transmute(time = floor_date(as.Date(Name), "month"), value = `BD RETAIL SALES EXCL CARS (CAL ADJ) X-12-ARIMA VOLA`)
dat <- retail %>%
mutate(value = log(as.numeric(value))) %>%
mutate(value = c(0, diff(value, 1))) %>%
filter(time >= as_date(start), time <= as_date(end))
category_test = c(560,121,277)
res_raw <- g_index(keyword = NA, category = category_test,
time = str_c(start, " ", end),
lags = 0)
g_index(keyword = NA, category = category_test,
time = str_c(start, " ", end),
lags = 0)
library(glmnet)
library(tidyverse)
library(ifwtrends)
library(lubridate)
library(zoo)
library(trendecon)
library(gtrendsR)
library(tsbox)
library(RJDemetra)
setwd("~/IFW/ifwtrends")
start = "2006-01-01"
end = "2021-07-01"
retail <- readxl::read_xlsx("data/retail_GER.xlsx") %>%
transmute(time = floor_date(as.Date(Name), "month"), value = `BD RETAIL SALES EXCL CARS (CAL ADJ) X-12-ARIMA VOLA`)
dat <- retail %>%
mutate(value = log(as.numeric(value))) %>%
mutate(value = c(0, diff(value, 1))) %>%
filter(time >= as_date(start), time <= as_date(end))
keyword = c(NA)
category_aco= c(956, 276, 179)
category_ret = c(560, 121,
277, 123,
988, 68,
660, 658, 466, 465, 659, 948,
270, 271, 137, 158,
646, 249, 256,
898, 289, #Hier 3 Kategorien fÃ¼r Autokauf von RWI ausgelassen
382, 383,
355, 41, 439, 3, 1010, 432, 882, 614, 78, 408,
74,
179, 276,
7, 143, 146, 508, 38)
category_test = c(560,121,277)
res_raw <- g_index(keyword = NA, category = category_test,
time = str_c(start, " ", end),
lags = 2)
#' @import tsbox
#' @import gtrendsR
#' @import trendecon
#' @import zoo
#' @examples \dontrun{
#' g_index(keyword = c("ikea","saturn"), time = "2018-01-01 2021-01-01")
#' }
#' @importFrom gtrendsR gtrends
#' @importFrom gtrendsR gtrends
#' @export
g_index <- function(
keyword = NA,
category = 0,
geo = "DE",
time = str_c("2006-01-01 ", Sys.Date()),
lags = 0){
start <- str_sub(time, 1,10)
end <- str_sub(time, 12,21)
dates <- seq.Date(from = as.Date(start), to = as.Date(end), by = "month")
fit <- readRDS("data/comtrend.rds") %>%
select(time = date, trend) %>%
filter(time >= as.Date(start))
g_dat2 <- ts_gtrends(keyword = keyword,
category = category,
geo = "DE",
time = time) %>%
mutate(value = log(value)) %>%
mutate(value = replace(value, value == -Inf, NA_real_)) %>%
mutate(value = na.approx(value, rule = 2))
if (!("id" %in% names(g_dat2))) g_dat2 <- mutate(g_dat2, id = as.character(as.vector(sapply(category, rep, length(dates)))))
g_dat_adj <- g_dat2 %>%
left_join(fit, by = "time") %>%
mutate(time = as.Date(time), adj = value - trend) %>%
select(id, time, adj) %>%
seas_adj(freq = "quarter", method = "arima") %>%
rename(s_adj = value) %>%
unique()
if (!("id" %in% names(g_dat_adj))) g_dat_adj <- mutate(g_dat_adj, id = as.character(rep(category, each = length(dates))))
index <- g_dat_adj %>%
group_by(id)
#mutate(s_adj = c(0, diff(s_adj, 1))) %>%
if (lags >=1) index <- mutate(index, lag_1 = lag(s_adj))
if (lags >=2) index <- mutate(index, lag_2 = lag(s_adj,2))
if (lags >=3) index <- mutate(index, lag_3 = lag(s_adj,3))
if (lags == 4) index <- mutate(index, lag_3 = lag(s_adj,3))
index <- index %>%
ungroup() %>%
rename(lag_0 = s_adj) %>%
filter(across(everything(), ~!is.na(.))) %>%
pivot_longer(cols = -c(id, time), names_to = "lag", values_to = "value") %>%
pivot_wider(names_from = c(id, lag), values_from = value)
return(index)
}
detach("package:ifwtrends", unload = TRUE)
#'If \code{"firstdiff"}, first differences with \code{lag = 1} is executed.
#'If \code{"comtrend"}, there is a polynom of degree 5 with id-Fixed Effects estimated, which captures the common trend. The residuals where then used as the adjusted series. For further Detial see Woloszko et.al. (2020)
#'
#'@examples
#'series <- trendecon::ts_gtrends(c("ikea", "saturn"), time = "all")
#'trend_adj(series, log.trafo = TRUE, method = "firstdiff")
#'@import dplyr tsbox zoo
#' @importFrom RJDemetra x13
#' @importFrom gtrendsR gtrends
#'@export
trend_adj <- function(series, log.trafo = F, method = "firstdiff"){
if (log.trafo) series <- mutate(series, value = log(value)) #Log-Trafo
if(method == "firstdiff"){   #Trendbereinigung mit ersten Differenzen mit lag = 1
if (!("id" %in% names(series))) series <- mutate(series, id = "id")
series <- series %>%
group_by(id) %>%
mutate(value = c(0, diff(value))) %>%
ungroup()
}
if(method == "comtrend"){    #Trendbereinigung mit Polynom wie in Paper
#Noch nicht richtig implementier!!
if (("id" %in% names(series))) fit <- lm(value ~ id -1 +poly(as.numeric(time), 3, raw = T), data = series)
else fit <- lm(value ~ +poly(as.numeric(time), 3, raw = T), data = series)
series <- mutate(series, value = fit$residuals)
}
series
}
#'series <- trendecon::ts_gtrends(c("ikea", "saturn"), time = "2018-01-01 2021-01-01")
#'seas_adj(series, freq = "month", method = "firstdiff")
#' @examples
#'series <- trendecon::ts_gtrends(c("ikea", "saturn"), time = "2018-01-01 2021-01-01")
#'seas_adj(series, freq = "month",  method = "firstdiff")
#'@import dplyr tsbox zoo
#'@import rJava
#' @importFrom RJDemetra x13
#' @importFrom gtrendsR gtrends
#'@export
seas_adj <-function(series, freq = "month", method = "arima"){
if(method == "arima"){
#Saisonbereinigung mit X-13 ARIMA
if (!("id" %in% names(series))) series <- mutate(series, id = "id")
series <- ts_ts(series)
h <- function(ts){
m <- x13(ts)
return(m$final$series[,"sa"])
}
if (identical(dim(series), NULL)){
series <- ts_tbl(h(series))
}
if (dim(series)[2] > 1){
series <- as.list(series)
series <- lapply(series, h)
n <- names(series)
t1 <- series[[1]]
for (i in 2:length(series)) t1 <- ts_c(t1, series[[i]])
dimnames(t1)[[2]] <- n
series <- ts_tbl(t1)
}
}
if(method == "firstdiff"){     #Saisonbereinigung mit ersten Differenzen mit lag = 4
#da gerade Quartalsdaten. Fuer monatsdaten lag = 12
if (!("id" %in% names(series))) series <- mutate(series, id = "id")
if (freq == "month") k = 12
if (freq == "quarter") k = 4
series <- series %>%
group_by(id) %>%
mutate(value = c(rep(0,k), diff(value, k))) %>% #Wenn Monatsdaten hier 12 statt 4
ungroup()
}
series
}
res_raw
res_raw <- g_index(keyword = NA, category = category_test,
time = str_c(start, " ", end),
lags = 2)
start_series = "2006-01-01"
start_period_2 = "2019-01-01"
end_2 = "2021-07-31"
r2 <-  roll(keyword = NA,
category = category_ret,
start_series = start_series,
start_period = start_period_2,
end = end_2,
fun = g_index,
lags = 2)
saveRDS(r2, "data/retail_gindex_roll_0721")
>>>>>>> Stashed changes
