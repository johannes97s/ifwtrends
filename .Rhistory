daily_series()
@export
library(tsbox)
library(gtrendsR)
library(trendecon)
library(tidyverse)
library(zoo)
library(lubridate)
#'@return Tabelle der taeglichen Werten
#'@examples \dontrun{
#' daily_series(keyword = "Ikea", geo = "NL", from = "2021-01-01")
#' }
#'@import gtrendsR trendecon tsbox lubridate zoo tibble tempdisagg magrittr
#'@importFrom dplyr select
#'@importFrom dplyr mutate
#'@importFrom dplyr filter
#'@importFrom stats time
#'@export
daily_series <- function(keyword = c("arbeitslos"),
geo = "DE",
from = "2006-01-01"){
d <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = as.numeric((Sys.Date() - from-180)/15) + 50, wait = 20, retry = 10, #n_windows calculated such that it reaches up to current date
prevent_window_shrinkage = TRUE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2], #Heute -90 Tage
stepsize = "1 day", windowsize = "3 months",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
dd <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
# download weekly series
w <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "11 weeks", windowsize = "5 years",
n_windows = as.numeric((Sys.Date() - from - 5*365)/(11*7)) + 10, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
w2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-1 year")[2],
stepsize = "1 week", windowsize = "1 year",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
ww <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(w), trendecon:::aggregate_windows(w2))
# download monthly series
m <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "15 years",
n_windows = (Sys.Date() - from - 15*365)/(30) + 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "20 years", ###Hier evtl aufpassen, geht nur bis 2026!
n_windows = 1, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(m), trendecon:::aggregate_windows(m2))
dd <- select(dd, -n)
ww <- select(ww, -n)
mm <- select(mm, -n)
ww %>%
mutate(week = lubridate::week(time), year = lubridate::year(time)) %>%
filter(week <= 52) %>%
select(time, value) -> ww
dd <- ts_regular(ts_dts(dd))
dd$value <- 0.5*(na.locf(dd$value,fromLast =TRUE) + na.locf(dd$value))
ww <-  ts_regular(ts_dts(ww))
ww$value <- 0.5*(na.locf(ww$value,fromLast =TRUE) + na.locf(ww$value))
mm <-  ts_regular(ts_dts(mm))
mm$value <- 0.5*(na.locf(mm$value,fromLast =TRUE) + na.locf(mm$value))
# mm %>%
#   mutate(week = week(time), year = year(time)) %>%
#   group_by(week, year) %>%
#   mutate(value = mean(value)) %>%
#   ungroup() %>%
#   select( - time) %>%
#   filter(week <= 52) %>%
#   unique() %>%
#   bind_cols(time = ww$time) %>%
#   select(time, value)-> mm
wd <- tempdisagg::td(ww ~ dd, method = "fast", conversion = "mean")
wd <- stats::predict(wd)
mwd <- tempdisagg::td(mm ~ wd, method = "fast", conversion = "mean")
mwd <- stats::predict(mwd)
as_tibble(mwd)
}
daily_series()
#'@return Tabelle der taeglichen Werten
#'@examples \dontrun{
#' daily_series(keyword = "Ikea", geo = "NL", from = "2021-01-01")
#' }
#'@import gtrendsR trendecon tsbox lubridate zoo tibble tempdisagg magrittr
#'@importFrom dplyr select
#'@importFrom dplyr mutate
#'@importFrom dplyr filter
#'@importFrom stats time
#'@export
daily_series <- function(keyword = c("arbeitslos"),
geo = "DE",
from = "2006-01-01"){
n1 <- as.numeric((Sys.Date() - from-180)/15) + 50
str(n1)
d <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = n1, wait = 20, retry = 10, #n_windows calculated such that it reaches up to current date
prevent_window_shrinkage = TRUE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2], #Heute -90 Tage
stepsize = "1 day", windowsize = "3 months",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
dd <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
# download weekly series
n2 <- as.numeric((Sys.Date() - from - 5*365)/(11*7)) + 10
str(n2)
w <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "11 weeks", windowsize = "5 years",
n_windows = n2, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
w2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-1 year")[2],
stepsize = "1 week", windowsize = "1 year",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
ww <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(w), trendecon:::aggregate_windows(w2))
# download monthly series
n3 <- as.numeric(Sys.Date() - from - 15*365)/(30) + 12
str(n3)
m <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "15 years",
n_windows = n3, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "20 years", ###Hier evtl aufpassen, geht nur bis 2026!
n_windows = 1, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(m), trendecon:::aggregate_windows(m2))
dd <- select(dd, -n)
ww <- select(ww, -n)
mm <- select(mm, -n)
ww %>%
mutate(week = lubridate::week(time), year = lubridate::year(time)) %>%
filter(week <= 52) %>%
select(time, value) -> ww
dd <- ts_regular(ts_dts(dd))
dd$value <- 0.5*(na.locf(dd$value,fromLast =TRUE) + na.locf(dd$value))
ww <-  ts_regular(ts_dts(ww))
ww$value <- 0.5*(na.locf(ww$value,fromLast =TRUE) + na.locf(ww$value))
mm <-  ts_regular(ts_dts(mm))
mm$value <- 0.5*(na.locf(mm$value,fromLast =TRUE) + na.locf(mm$value))
# mm %>%
#   mutate(week = week(time), year = year(time)) %>%
#   group_by(week, year) %>%
#   mutate(value = mean(value)) %>%
#   ungroup() %>%
#   select( - time) %>%
#   filter(week <= 52) %>%
#   unique() %>%
#   bind_cols(time = ww$time) %>%
#   select(time, value)-> mm
wd <- tempdisagg::td(ww ~ dd, method = "fast", conversion = "mean")
wd <- stats::predict(wd)
mwd <- tempdisagg::td(mm ~ wd, method = "fast", conversion = "mean")
mwd <- stats::predict(mwd)
as_tibble(mwd)
}
daily_series(keyword = keyword,
geo = geo,
from = from)
t<-.Last.value
t
plot(t)
plot(t, t = "l")
t %>% mutate(time = floor_date(time, "month"))
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value))
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) <- t2
t2 <- t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value))
plot(t2)
plot(select(t2, time, m), t ="l")
s<-ts_gtrends("arbeitslos", "DE", time = "2006-01-01 05-10-2021")
s<-ts_gtrends("arbeitslos", geo = "DE", time = "2006-01-01 05-10-2021")
s<-ts_gtrends(keyword = "arbeitslos", geo = "DE", time = "2006-01-01 05-10-2021")
s<-ts_gtrends(keyword = "arbeitslos", geo = "DE", time = "2006-01-01 2021-10-05")
s
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
left_join(s)
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
right_join(s)
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
right_join(mutate(s, orig = value))
t
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value))
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
left_join(mutate(s, orig = value))
s
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
left_join(mutate(s, orig = value), by = "time")
t2 <- t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
left_join(mutate(s, orig = value, keep = "used"), by = "time")
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value)) %>%
left_join(mutate(s, orig = value, keep = "used"), by = "time")
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value))
s
t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value))
t2 <- t %>% mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(m = mean(value))
plot(select(t2, time, m), t ="l")
linex(s)
lines(s)
s<-ts_gtrends(keyword = "arbeitslos", geo = "DE", time = "2006-01-01 2021-10-05")
plot(select(t2, time, m), t ="l")
lines(s, col = "r")
lines(s, col = "red")
s
print(t2, n = 300)
s
tail(s)
tail(t2)
path("..")
path.expand("..")
path.expand("...")
path.expand(".")
path.expand(.)
path.expand("~")
?caret
library(devtools)
use_package("rJava")
load_all()
check()
x13(AirPassengers)
path.expand("~")
Sys.setenv(JAVA_HOME = "~/Java/jre-8"
)
Sys.setenv(JAVA_HOME = "~/Java/jre-8")
check()
JAVA_HOME
Sys.getenv("JAVA_HOME")
load_all()
check()
library(rJava)
check()
check()
library(rJava)
Sys.getenv("Path")
check()
load_all()
check()
document()
#' @importFrom dplyr mutate
#' @importFrom dplyr select
#' @importFrom dplyr filter
#' @importFrom tidyr pivot_longer
#' @importFrom openxlsx write.xlsx
#' @importFrom readxl read_excel
#' @importFrom stats poly
#' @importFrom rlang !!
#' @importFrom rlang :=
#' @export
est_trends <- function(){
end = Sys.Date
dates <- seq.Date(
from = as.Date( "2006-01-01"),
to = as.Date(end),
by = "month"
)
series <- tibble(date = dates)
missing = NULL
cat_samp <- unique(c(sample(categories$id, 280), "67")) #67 is arbitrary chosen
k = 0
for (i in cat_samp){
Sys.sleep(0.1)
g <- gtrends(
geo = "DE",
time = str_c("2006-01-01 ", end),
category = i
)$interest_over_time
if (is.null(g)) {
missing <- c(missing, i)
} else {
series <- bind_cols(series, !!as.character(eval(i)) := g$hits)
}
k <- k+1
print(k)
}
series <- series %>%
pivot_longer( cols = -date, names_to = "id", values_to = "value") %>%
mutate(value = log(value))
write.xlsx(series, "data/cat_sample_Q32021.xlsx")
series <- read_excel("data/cat_sample_Q42019.xlsx")
series<-arrange(series, id)
fit <- lm(value ~ id -1 +poly(as.numeric(date), 5, raw = T), data = series)
series <- mutate(series, date = as.Date(date), fit = fit)
series
}
load_all()
@export
#' @importFrom dplyr mutate
#' @importFrom dplyr select
#' @importFrom dplyr filter
#' @importFrom tidyr pivot_longer
#' @importFrom openxlsx write.xlsx
#' @importFrom readxl read_excel
#' @importFrom stats poly
#' @importFrom rlang !!
#' @importFrom rlang :=
#' @export
est_trend <- function(){
end = Sys.Date
dates <- seq.Date(
from = as.Date( "2006-01-01"),
to = as.Date(Sys.Date()),
by = "month"
)
series <- tibble(date = dates)
missing = NULL
cat_samp <- unique(c(sample(categories$id, 280), "67")) #67 is arbitrary chosen
k = 0
for (i in cat_samp){
Sys.sleep(0.1)
g <- gtrends(
geo = "DE",
time = str_c("2006-01-01 ", end),
category = i
)$interest_over_time
if (is.null(g)) {
missing <- c(missing, i)
} else {
series <- bind_cols(series, !!as.character(eval(i)) := g$hits)
}
k <- k+1
print(k)
}
series <- series %>%
pivot_longer( cols = -date, names_to = "id", values_to = "value") %>%
mutate(value = log(value))
write.xlsx(series, "data/cat_sample_Q32021.xlsx")
series <- read_excel("data/cat_sample_Q42019.xlsx")
series<-arrange(series, id)
fit <- lm(value ~ id -1 +poly(as.numeric(date), 5, raw = T), data = series)
series <- mutate(series, date = as.Date(date), fit = fit)
series
}
load_all()
trendecon::categories
gtrendsR::categories
#' @importFrom dplyr mutate
#' @importFrom dplyr select
#' @importFrom dplyr filter
#' @importFrom tidyr pivot_longer
#' @importFrom openxlsx write.xlsx
#' @importFrom readxl read_excel
#' @importFrom stats poly
#' @importFrom rlang !!
#' @importFrom rlang :=
#' @export
est_trend <- function(){
end = Sys.Date
dates <- seq.Date(
from = as.Date( "2006-01-01"),
to = as.Date(Sys.Date()),
by = "month"
)
series <- tibble(date = dates)
missing = NULL
cat_samp <- unique(c(sample(categories$id, 280), "67")) #67 is arbitrary chosen
k = 0
for (i in cat_samp){
Sys.sleep(0.1)
g <- gtrends(
geo = "DE",
time = str_c("2006-01-01 ", end),
category = i
)$interest_over_time
if (is.null(g)) {
missing <- c(missing, i)
} else {
series <- bind_cols(series, !!as.character(eval(i)) := g$hits)
}
k <- k+1
print(k)
}
series <- series %>%
pivot_longer( cols = -date, names_to = "id", values_to = "value") %>%
mutate(value = log(value))
write.xlsx(series, "data/cat_sample_Q32021.xlsx")
series <- read_excel("data/cat_sample_Q42019.xlsx")
series<-arrange(series, id)
fit <- lm(value ~ id -1 +poly(as.numeric(date), 5, raw = T), data = series)
series <- mutate(series, date = as.Date(date), fit = fit)
series
}
load_all()
rm(list = c("est_trend"))
load_all()
document()
document()
document()
load_all()
document()
check()
rm(est_trends())
rm("est_trends()")
rm("est_trends")
est_trend()
load_all()
load_all()
load_all()
est_trend()
install()
load_all()
library(devtools)
load_all()
install.packages("rJava")
load_all()
install.packages("RJDemetra")
library(devtools)
install()
Sys.getenv(JAVA_HOME)
Sys.setenv(JAVA_HOME = "C:\\Program Files\\OpenJDK\\jre-8.0.292.10-hotspot")
install()
Sys.getenv("JAVA_HOME")
library(rJava)
Sys.setenv(JAVA_HOME = "C:/Program Files/OpenJDK/jre-8.0.262.10-hotspot")
library(rJava)
install()
library(devtools)
install()
load_all()
document()
document()
load_all()
install()
library(ifwtrends)
load_all()
library(devtools)
load_all()
document()
library(rJava)
Sys.getenv("R_ENVIRON_USER")
path.expand("./.Renviron")
getwd()
usethis::edit_r_environ()
usethis::edit_r_environ("ifwtrends")
usethis::edit_r_environ(project = "ifwtrends")
usethis::edit_r_environ("ifwtrends")
usethis::edit_r_environ("project")
