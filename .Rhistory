wd <- predict(wd)
mwd <- tempdisagg::td(mm ~ wd, method = "fast", conversion = "mean")
mwd <- predict(mwd)
write.xlsx(mwd, "mwd.xlsx")
write.xlsx(wd, "wd.xlsx")
write.xlsx(mm, "mm.xlsx")
write.xlsx(ww, "ww.xlsx")
mwd %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(monthl = mean(value)) %>%
select(-value) %>%
unique() %>%
left_join(ts_gtrends(keyword = keyword, geo = geo, time = "2006-01-01 2021-08-25", retry = 5), by = "time") %>%
left_join(mm, by = "time")-> mwd_mon
ggplot(pivot_longer(mwd_mon, cols = -time, names_to = "id", values_to = "value"), aes(x = time, y = value, color = id)) +
geom_line()
ts_gtrends(keyword = keyword, geo = geo, time = "2006-01-01 2021-08-25")
correlate(mwd_mon$monthl, mwd_mon$value.x)
mwd_mon
keyword = c("Wirtschaftskrise")
geo = "DE"
from <- "2011-01-01"
d <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 348, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2],
stepsize = "1 day", windowsize = "3 months",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
dd <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
# download weakly series
w <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "11 weeks", windowsize = "5 years",
n_windows = 68, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
w2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-1 year")[2],
stepsize = "1 week", windowsize = "1 year",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
ww <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(w), trendecon:::aggregate_windows(w2))
# download monthly series
m <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "15 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "20 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(m), trendecon:::aggregate_windows(m2))
dd <- select(dd, -n)
ww <- select(ww, -n)
mm <- select(mm, -n)
ww %>%
mutate(week = week(time), year = year(time)) %>%
filter(week <= 52) %>%
select(time, value) -> ww
dd <- ts_regular(ts_dts(dd))
dd$value <- 0.5*(na.locf(dd$value,fromLast =TRUE) + na.locf(dd$value))
ww <-  ts_regular(ts_dts(ww))
ww$value <- 0.5*(na.locf(ww$value,fromLast =TRUE) + na.locf(ww$value))
mm <-  ts_regular(ts_dts(mm))
mm$value <- 0.5*(na.locf(mm$value,fromLast =TRUE) + na.locf(mm$value))
wd <- tempdisagg::td(ww ~ dd, method = "fast", conversion = "mean")
wd <- predict(wd)
mwd <- tempdisagg::td(mm ~ wd, method = "fast", conversion = "mean")
mwd <- predict(mwd)
mwd %>%
mutate(time = floor_date(time, "month")) %>%
group_by(time) %>%
mutate(monthl = mean(value)) %>%
select(-value) %>%
unique() %>%
left_join(ts_gtrends(keyword = keyword, geo = geo, time = "2006-01-01 2021-08-25", retry = 5), by = "time") %>%
left_join(mm, by = "time")-> mwd_mon
mwd_mon
ggplot(pivot_longer(mwd_mon, cols = -time, names_to = "id", values_to = "value"), aes(x = time, y = value, color = id)) +
geom_line()
ts_gtrends(keyword = keyword, geo = geo, time = "2006-01-01 2021-08-25")
correlate(mwd_mon$monthl, mwd_mon$value.x)
keyword = c("Wirtschaftskrise" , "arbeitslos")
geo = "DE"
from <- "2011-01-01"
d <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "15 days", windowsize = "6 months",
n_windows = 348, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
d2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-90 days")[2],
stepsize = "1 day", windowsize = "3 months",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
dd <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(d), trendecon:::aggregate_windows(d2))
# download weakly series
w <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "11 weeks", windowsize = "5 years",
n_windows = 68, wait = 20, retry = 10,
prevent_window_shrinkage = TRUE
)
w2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = seq(Sys.Date(), length.out = 2, by = "-1 year")[2],
stepsize = "1 week", windowsize = "1 year",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
ww <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(w), trendecon:::aggregate_windows(w2))
# download monthly series
m <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "15 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
m2 <- trendecon:::ts_gtrends_windows(
keyword = keyword,
geo = geo,
from = from,
stepsize = "1 month", windowsize = "20 years",
n_windows = 12, wait = 20, retry = 10,
prevent_window_shrinkage = FALSE
)
mm <- trendecon:::aggregate_averages(trendecon:::aggregate_windows(m), trendecon:::aggregate_windows(m2))
dd <- select(dd, -n)
ww <- select(ww, -n)
mm <- select(mm, -n)
ww %>%
mutate(week = week(time), year = year(time)) %>%
filter(week <= 52) %>%
select(time, value) -> ww
dd <- ts_regular(ts_dts(dd))
dd$value <- 0.5*(na.locf(dd$value,fromLast =TRUE) + na.locf(dd$value))
ww <-  ts_regular(ts_dts(ww))
ww$value <- 0.5*(na.locf(ww$value,fromLast =TRUE) + na.locf(ww$value))
mm <-  ts_regular(ts_dts(mm))
mm$value <- 0.5*(na.locf(mm$value,fromLast =TRUE) + na.locf(mm$value))
wd <- tempdisagg::td(ww ~ dd, method = "fast", conversion = "mean")
wd <- predict(wd)
mwd <- tempdisagg::td(mm ~ wd, method = "fast", conversion = "mean")
mwd <- predict(mwd)
library(devtools)
install("~/ifwtrends")
install("~/Documents/ifwtrends")
load_all()
library(tidyverse)
library(gtrendsR)
library(trendecon)
library(tsbox)
library(openxlsx)
library(corrr)
library(lubridate)
library(zoo)
load_all()
install("~/Documents/ifwtrends")
install("~/Documents/ifwtrends")
warnings()
library(itsmr)
read.xlsx("~/Documents/ifwtrends/data/Faktoren_r2.xlsx")
read.xlsx("~/Documents/ifwtrends/data/Faktoren_R2.xlsx")
read.xlsx("~/ifwtrends/data/Faktoren_R2.xlsx")
#Hilfsfunktion
f <- function(serie, i, dat){
summary(lm(dat[[i+1]] ~ serie[[1]]))$r.squared
}
#'R2 der Regression der Serien auf die Faktoren
#'\code(factorR2)
#'
#'@param series tibble mit den Zeitreihen als Spalten.
#'@param factors tibble mit den Faktoren als Spalten.
#'
#'@return Tabelle der R^2 jeder Zeitreihe auf jeden Faktor
#'@examples
#'2+2
#'@export
factorR2 <- function(series, factors, plot = F){
series <- select(series, -1)
factors <- select(factors, -1)
R2 <- tibble()
for (i in seq_along(factors)){
f <- function(serie) {
s <- summary(lm(factors[[i]] ~ serie))
s$r.squared
}
R2 <- bind_rows(R2, apply(series, 2, f))
}
res <- bind_cols(tibble(factors = str_c("PC",1:length(factors))), R2)
if (!plot) return(res)
if (plot){
pivot_longer(factors, -date, names_to = "series", values_to = "value") -> pcomp
pivot_longer(series, -date, names_to = "series", values_to = "value") -> series
pivot_longer(res, -factors, names_to = "series", values_to = "R2")-> r2
r2 %>%
#filter(factors == "PC1") %>%
ggplot(aes(x = series, y = R2))+
geom_bar(stat = "identity")+
facet_wrap(~factors, ncol = 1)+
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 1, hjust=1))+
labs(title = "Bestimmtheitsmaß der Regression auf verschiedene Hauptkomponenten")+
scale_y_continuous(breaks=c(0, 0.5, 1))
}
}
d <- read.xlsx("~/ifwtrends/data/Kategorien_und_PC.xlsx")
d
factorR2(d[10:23], d[2:4], plot = T)
factorR2(d[10:23], d[1:4], plot = T)
d
d[-1]
@export
#'R2 der Regression der Serien auf die Faktoren
#'\code(factorR2)
#'
#'@param series tibble mit den Zeitreihen als Spalten.
#'@param factors tibble mit den Faktoren als Spalten.
#'
#'@return Tabelle der R^2 jeder Zeitreihe auf jeden Faktor
#'@examples
#'2+2
#'@export
factorR2 <- function(series, factors, plot = F){
R2 <- tibble()
for (i in seq_along(factors)){
f <- function(serie) {
s <- summary(lm(factors[[i+1]] ~ serie))
s$r.squared
}
R2 <- bind_rows(R2, apply(series[-1], 2, f))
}
res <- bind_cols(tibble(factors = str_c("PC",1:length(factors))), R2)
if (!plot) return(res)
if (plot){
pivot_longer(factors, -date, names_to = "series", values_to = "value") -> pcomp
pivot_longer(series, -date, names_to = "series", values_to = "value") -> series
pivot_longer(res, -factors, names_to = "series", values_to = "R2")-> r2
r2 %>%
#filter(factors == "PC1") %>%
ggplot(aes(x = series, y = R2))+
geom_bar(stat = "identity")+
facet_wrap(~factors, ncol = 1)+
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 1, hjust=1))+
labs(title = "Bestimmtheitsmaß der Regression auf verschiedene Hauptkomponenten")+
scale_y_continuous(breaks=c(0, 0.5, 1))
}
}
d
t = tibble(a = 1, b = 3)
select(t, -any_of("z"))
select(t, -any_of("a"))
select(t, -z)
d
s = select(d, date, 10:20)
f = select(d, 1:5)
factorR2(s,f)
s
s = as_tibble(select(d, date, 10:20))
s
d <- read.xlsx("~/ifwtrends/data/Kategorien_und_PC.xlsx", detectDates = T)
d
s = as_tibble(select(d, date, 10:20))
s
f = as_tibble(select(d, 1:5))
f
factorR2(s,f)
f
f[-1][[1]]
#'R2 der Regression der Serien auf die Faktoren
#'\code(factorR2)
#'
#'@param series tibble mit den Zeitreihen als Spalten.
#'@param factors tibble mit den Faktoren als Spalten.
#'
#'@return Tabelle der R^2 jeder Zeitreihe auf jeden Faktor
#'@examples
#'2+2
#'@export
factorR2 <- function(series, factors, plot = F){
R2 <- tibble()
for (i in seq_along(factors)){
f <- function(serie) {
s <- summary(lm(factors[-1][[i]] ~ serie[-1]))
s$r.squared
}
R2 <- bind_rows(R2, apply(series[-1], 2, f))
}
res <- bind_cols(tibble(factors = str_c("PC",1:length(factors[-1]))), R2)
if (!plot) return(res)
if (plot){
pivot_longer(factors, -date, names_to = "series", values_to = "value") -> pcomp
pivot_longer(series, -date, names_to = "series", values_to = "value") -> series
pivot_longer(res, -factors, names_to = "series", values_to = "R2")-> r2
r2 %>%
#filter(factors == "PC1") %>%
ggplot(aes(x = series, y = R2))+
geom_bar(stat = "identity")+
facet_wrap(~factors, ncol = 1)+
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 1, hjust=1))+
labs(title = "Bestimmtheitsmaß der Regression auf verschiedene Hauptkomponenten")+
scale_y_continuous(breaks=c(0, 0.5, 1))
}
}
factorR2(s,f)
#'R2 der Regression der Serien auf die Faktoren
#'\code(factorR2)
#'
#'@param series tibble mit den Zeitreihen als Spalten.
#'@param factors tibble mit den Faktoren als Spalten.
#'
#'@return Tabelle der R^2 jeder Zeitreihe auf jeden Faktor
#'@examples
#'2+2
#'@export
factorR2 <- function(series, factors, plot = F){
R2 <- tibble()
for (i in seq_along(factors)){
f <- function(serie) {
s <- summary(lm(factors[-1][[i]] ~ serie))
s$r.squared
}
R2 <- bind_rows(R2, apply(series[-1], 2, f))
}
res <- bind_cols(tibble(factors = str_c("PC",1:length(factors[-1]))), R2)
if (!plot) return(res)
if (plot){
pivot_longer(factors, -date, names_to = "series", values_to = "value") -> pcomp
pivot_longer(series, -date, names_to = "series", values_to = "value") -> series
pivot_longer(res, -factors, names_to = "series", values_to = "R2")-> r2
r2 %>%
#filter(factors == "PC1") %>%
ggplot(aes(x = series, y = R2))+
geom_bar(stat = "identity")+
facet_wrap(~factors, ncol = 1)+
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 1, hjust=1))+
labs(title = "Bestimmtheitsmaß der Regression auf verschiedene Hauptkomponenten")+
scale_y_continuous(breaks=c(0, 0.5, 1))
}
}
factorR2(s,f)
@export
#'R2 der Regression der Serien auf die Faktoren
#'\code(factorR2)
#'
#'@param series tibble mit den Zeitreihen als Spalten.
#'@param factors tibble mit den Faktoren als Spalten.
#'
#'@return Tabelle der R^2 jeder Zeitreihe auf jeden Faktor
#'@examples
#'2+2
#'@export
factorR2 <- function(series, factors, plot = F){
R2 <- tibble()
for (i in seq_along(factors[-1])){
f <- function(serie) {
s <- summary(lm(factors[-1][[i]] ~ serie))
s$r.squared
}
R2 <- bind_rows(R2, apply(series[-1], 2, f))
}
res <- bind_cols(tibble(factors = str_c("PC",1:length(factors[-1]))), R2)
if (!plot) return(res)
if (plot){
pivot_longer(factors, -date, names_to = "series", values_to = "value") -> pcomp
pivot_longer(series, -date, names_to = "series", values_to = "value") -> series
pivot_longer(res, -factors, names_to = "series", values_to = "R2")-> r2
r2 %>%
#filter(factors == "PC1") %>%
ggplot(aes(x = series, y = R2))+
geom_bar(stat = "identity")+
facet_wrap(~factors, ncol = 1)+
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 1, hjust=1))+
labs(title = "Bestimmtheitsmaß der Regression auf verschiedene Hauptkomponenten")+
scale_y_continuous(breaks=c(0, 0.5, 1))
}
}
factorR2(s,f)
factorR2(s,f, plot = T)
#'R2 der Regression der Serien auf die Faktoren
#'\code(factorR2)
#'
#'@param series tibble mit den Zeitreihen als Spalten.
#'@param factors tibble mit den Faktoren als Spalten.
#'
#'@return Tabelle der R^2 jeder Zeitreihe auf jeden Faktor
#'@examples
#'2+2
#'@export
factorR2 <- function(series, factors, plot = F){
R2 <- tibble()
for (i in seq_along(factors[-1])){
f <- function(serie) {
s <- summary(lm(factors[-1][[i]] ~ serie))
s$r.squared
}
R2 <- bind_rows(R2, apply(series[-1], 2, f))
}
res <- bind_cols(tibble(factors = str_c("PC",1:length(factors[-1]))), R2)
if (!plot) return(res)
if (plot){
pivot_longer(factors, -date, names_to = "series", values_to = "value") -> pcomp
pivot_longer(series, -date, names_to = "series", values_to = "value") -> series
pivot_longer(res, -factors, names_to = "series", values_to = "R2")-> r2
r2 %>%
#filter(factors == "PC1") %>%
ggplot(aes(x = series, y = R2))+
geom_bar(stat = "identity")+
facet_wrap(~factors, ncol = 1)+
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 1, hjust=1))+
labs(title = "Bestimmtheitsmaß der Regression auf verschiedene Hauptkomponenten")+
scale_y_continuous(breaks=c(0, 0.5, 1))
return(res)
}
}
factorR2(s,f, plot = T)
s
typeof(s[1])
typeof(s[[1])
typeof(s[[1]])
class(s[[1]])
class(s[1])
#'\code(factorR2)
#'
#'@param series tibble mit den Zeitreihen als Spalten.
#'@param factors tibble mit den Faktoren als Spalten.
#'@param
#'
#'@return Tabelle der R^2 jeder Zeitreihe auf jeden Faktor
#'@examples
#'2+2
#'@export
factorR2 <- function(series, factors, plot = F){
stopifnot("series muss führende Zeitspalte enthalten" = class(series[[1]]) == "Date")
stopifnot("factors muss führende Zeitspalte enthalten" = class(factors[[1]]) == "Date")
R2 <- tibble()
for (i in seq_along(factors[-1])){
f <- function(serie) {
s <- summary(lm(factors[-1][[i]] ~ serie))
s$r.squared
}
R2 <- bind_rows(R2, apply(series[-1], 2, f))
}
res <- bind_cols(tibble(factors = str_c("PC",1:length(factors[-1]))), R2)
if (!plot) return(res)
if (plot){
pivot_longer(factors, -date, names_to = "series", values_to = "value") -> pcomp
pivot_longer(series, -date, names_to = "series", values_to = "value") -> series
pivot_longer(res, -factors, names_to = "series", values_to = "R2")-> r2
r2 %>%
#filter(factors == "PC1") %>%
ggplot(aes(x = series, y = R2))+
geom_bar(stat = "identity")+
facet_wrap(~factors, ncol = 1)+
theme(axis.title.x = element_blank(),
axis.text.x = element_text(angle = 60, size = 6, vjust = 1, hjust=1))+
labs(title = "Bestimmtheitsmaß der Regression auf verschiedene Hauptkomponenten")+
scale_y_continuous(breaks=c(0, 0.5, 1))
return(res)
}
}
factorR2(s,f, plot = T)
factorR2(s,f[-1], plot = T)
library(devtools)
install("~/Documents/ifwtrends")
document(pkg = ".", roclets = NULL, quiet = FALSE)
warnings()
install("~/Documents/ifwtrends")
document(pkg = ".", roclets = NULL, quiet = FALSE)
install("~/Documents/ifwtrends")
document(pkg = ".", roclets = NULL, quiet = FALSE)
?daily_series
